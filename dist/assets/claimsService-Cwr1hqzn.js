import{s as g}from"./index-Cilu4N9n.js";const $={async getAllClaims(n=null){var i,t,a;try{let s=(a=(t=(i=g)==null?void 0:i.from("claims"))==null?void 0:t.select(`
          *,
          vehicle:vehicles(make, model, year, vin, owner_name),
          product:products(name, brand, category),
          submitted_by_profile:user_profiles!submitted_by(full_name, email),
          assigned_to_profile:user_profiles!assigned_to(full_name, email)
        `))==null?void 0:a.order("created_at",{ascending:!1});n&&(s=s==null?void 0:s.eq("org_id",n));const{data:l}=await s.throwOnError();return l||[]}catch(s){throw new Error(`Failed to fetch claims: ${s.message}`)}},async getCustomerClaims(n,i=null){var t,a,s,l;try{let r=(l=(s=(a=(t=g)==null?void 0:t.from("claims"))==null?void 0:a.select(`
          *,
          vehicle:vehicles(make, model, year, owner_name),
          product:products(name, brand, category),
          attachments:claim_attachments(*)
        `))==null?void 0:s.eq("customer_email",n))==null?void 0:l.order("created_at",{ascending:!1});i&&(r=r==null?void 0:r.eq("org_id",i));const{data:c}=await r.throwOnError();return c||[]}catch(r){throw new Error(`Failed to fetch customer claims: ${r.message}`)}},async getCustomerVehicles(n,i=null){var t,a,s,l;try{let r=(l=(s=(a=(t=g)==null?void 0:t.from("vehicles"))==null?void 0:a.select("id, make, model, year, vin"))==null?void 0:s.eq("owner_email",n))==null?void 0:l.eq("vehicle_status","active");const{data:c}=await r.throwOnError();return c||[]}catch(r){throw new Error(`Failed to fetch customer vehicles: ${r.message}`)}},async getProducts(n=null){var i,t,a;try{let s=(a=(t=(i=g)==null?void 0:i.from("products"))==null?void 0:t.select("id, name, brand, category, unit_price"))==null?void 0:a.order("name");n&&(s=s==null?void 0:s.eq("org_id",n));const{data:l}=await s.throwOnError();return l||[]}catch(s){throw new Error(`Failed to fetch products: ${s.message}`)}},async createClaim(n){var i,t,a,s;try{const{data:l,error:r}=await((i=g)==null?void 0:i.rpc("generate_claim_number"));if(r)throw r;const c={...n,claim_number:l},{data:o,error:u}=await((s=(a=(t=g)==null?void 0:t.from("claims"))==null?void 0:a.insert([c]))==null?void 0:s.select(`
          *,
          vehicle:vehicles(make, model, year),
          product:products(name, brand)
        `));if(u)throw u;return o==null?void 0:o[0]}catch(l){throw new Error(`Failed to create claim: ${l.message}`)}},async updateClaim(n,i){var t,a,s,l;try{const{data:r,error:c}=await((l=(s=(a=(t=g)==null?void 0:t.from("claims"))==null?void 0:a.update(i))==null?void 0:s.eq("id",n))==null?void 0:l.select(`
          *,
          vehicle:vehicles(make, model, year),
          product:products(name, brand),
          assigned_to_profile:user_profiles!assigned_to(full_name, email)
        `));if(c)throw c;return r==null?void 0:r[0]}catch(r){throw new Error(`Failed to update claim: ${r.message}`)}},async uploadClaimPhoto(n,i,t){var a,s,l,r,c,o;try{const u=`${Date.now()}-${i==null?void 0:i.name}`,d=`claim-${n}/${u}`,{data:f,error:p}=await((l=(s=(a=g)==null?void 0:a.storage)==null?void 0:s.from("claim-photos"))==null?void 0:l.upload(d,i));if(p)throw p;const{data:_,error:e}=await((o=(c=(r=g)==null?void 0:r.from("claim_attachments"))==null?void 0:c.insert([{claim_id:n,file_name:i==null?void 0:i.name,file_path:d,file_type:i==null?void 0:i.type,file_size:i==null?void 0:i.size,description:t}]))==null?void 0:o.select());if(e)throw e;return _==null?void 0:_[0]}catch(u){throw new Error(`Failed to upload photo: ${u.message}`)}},async getClaimPhotoUrl(n){var i,t,a,s,l,r,c;try{if(!n)return console.warn("No file path provided for signed URL"),null;const o=n==null?void 0:n.split("/");if(!o||(o==null?void 0:o.length)<2)return console.warn(`Invalid file path format: ${n}`),null;const u=o==null?void 0:o[0],d=(i=o==null?void 0:o.slice(-1))==null?void 0:i[0],{data:f,error:p}=await((s=(a=(t=g)==null?void 0:t.storage)==null?void 0:a.from("claim-photos"))==null?void 0:s.list(u,{search:d}));if(p)return console.warn("Error checking file existence:",{error:p,filePath:n,folderName:u,fileName:d}),null;if(!f||!Array.isArray(f)||(f==null?void 0:f.length)===0)return console.info(`File not found in storage: ${n}`),null;if(!(f==null?void 0:f.find(m=>(m==null?void 0:m.name)===d)))return console.info(`Specific file not found in folder: ${d} in ${u}`),null;const{data:e,error:w}=await((c=(r=(l=g)==null?void 0:l.storage)==null?void 0:r.from("claim-photos"))==null?void 0:c.createSignedUrl(n,7200));return w?(console.warn("Error creating signed URL:",{error:w,filePath:n,errorMessage:w==null?void 0:w.message,statusCode:w==null?void 0:w.statusCode}),null):e!=null&&e.signedUrl?e==null?void 0:e.signedUrl:(console.warn("No signed URL returned from Supabase:",{filePath:n,data:e}),null)}catch(o){return console.warn("Unexpected error in getClaimPhotoUrl:",{error:(o==null?void 0:o.message)||o,filePath:n,stack:o==null?void 0:o.stack}),null}},async getClaimAttachments(n){var i,t,a,s,l;try{if(!n)return console.warn("No claim ID provided for attachments"),[];const{data:r,error:c}=await((s=(a=(t=(i=g)==null?void 0:i.from("claim_attachments"))==null?void 0:t.select("*"))==null?void 0:a.eq("claim_id",n))==null?void 0:s.order("created_at",{ascending:!1}));if(c)throw console.error("Database error fetching claim attachments:",{error:c==null?void 0:c.message,claimId:n}),c;if(!r||(r==null?void 0:r.length)===0)return console.info(`No attachments found for claim ${n}`),[];console.info(`Processing ${r==null?void 0:r.length} attachments for claim ${n}`);const o=r==null?void 0:r.map(async(e,w)=>{try{if(!(e!=null&&e.file_path))return console.warn(`Attachment ${e==null?void 0:e.id} has no file path`),{...e,signedUrl:null,hasValidUrl:!1,error:"No file path"};console.info(`Processing attachment ${w+1}/${r==null?void 0:r.length}: ${e==null?void 0:e.file_name}`);const m=await this.getClaimPhotoUrl(e==null?void 0:e.file_path);return{...e,signedUrl:m,hasValidUrl:!!m,error:m?null:"Failed to generate signed URL"}}catch(m){return console.warn(`Error processing attachment ${e==null?void 0:e.id}:`,{error:m==null?void 0:m.message,attachmentId:e==null?void 0:e.id,fileName:e==null?void 0:e.file_name}),{...e,signedUrl:null,hasValidUrl:!1,error:(m==null?void 0:m.message)||"Processing error"}}}),u=await Promise.allSettled(o),d=u==null?void 0:u.map((e,w)=>{var m;return(e==null?void 0:e.status)==="fulfilled"?e==null?void 0:e.value:(console.error(`Failed to process attachment ${w}:`,e==null?void 0:e.reason),{id:`failed_${w}`,signedUrl:null,hasValidUrl:!1,error:((m=e==null?void 0:e.reason)==null?void 0:m.message)||"Promise rejected"})}),f=d==null?void 0:d.filter(e=>{var w;return e&&(e==null?void 0:e.id)&&typeof(e==null?void 0:e.id)!="string"||!((w=e==null?void 0:e.id)!=null&&w.startsWith("failed_"))}),p=(l=f==null?void 0:f.filter(e=>e==null?void 0:e.hasValidUrl))==null?void 0:l.length,_=f==null?void 0:f.length;return console.info(`Successfully processed ${p}/${_} attachments for claim ${n}`),f}catch(r){return console.error("Critical error in getClaimAttachments:",{error:r==null?void 0:r.message,claimId:n,stack:r==null?void 0:r.stack}),[]}},async validateClaimAttachments(n){var i,t,a,s;try{const l=await((a=(t=(i=g)==null?void 0:i.from("claim_attachments"))==null?void 0:t.select("*"))==null?void 0:a.eq("claim_id",n));if(!(l!=null&&l.data))return{valid:0,invalid:0};let r=0,c=0;for(const o of l==null?void 0:l.data)await this.getClaimPhotoUrl(o==null?void 0:o.file_path)?r++:(c++,console.warn(`Invalid attachment found: ${o==null?void 0:o.id} - ${o==null?void 0:o.file_name}`));return{valid:r,invalid:c,total:(s=l==null?void 0:l.data)==null?void 0:s.length}}catch(l){return console.error("Error validating claim attachments:",l),{valid:0,invalid:0,total:0}}},async listClaimFiles(n){var i,t,a;try{const s=`claim-${n}`,{data:l,error:r}=await((a=(t=(i=g)==null?void 0:i.storage)==null?void 0:t.from("claim-photos"))==null?void 0:a.list(s,{limit:100,sortBy:{column:"created_at",order:"desc"}}));if(r)throw r;return l||[]}catch(s){throw console.error("Error listing claim files:",s),new Error(`Failed to list claim files: ${s.message}`)}},async downloadClaimPhoto(n){var i,t,a,s,l,r;try{const{data:c,error:o}=await((a=(t=(i=g)==null?void 0:i.storage)==null?void 0:t.from("claim-photos"))==null?void 0:a.download(n));if(o)throw o;const u=URL.createObjectURL(c),d=document.createElement("a");return d.href=u,d.download=(s=n==null?void 0:n.split("/"))==null?void 0:s.pop(),(l=document.body)==null||l.appendChild(d),d==null||d.click(),(r=document.body)==null||r.removeChild(d),URL.revokeObjectURL(u),!0}catch(c){throw console.error("Error downloading claim photo:",c),new Error(`Failed to download photo: ${c.message}`)}},async getClaimsStats(n=null){var i,t;try{let a=(t=(i=g)==null?void 0:i.from("claims"))==null?void 0:t.select("status, priority, claim_amount, created_at");n&&(a=a==null?void 0:a.eq("org_id",n));const{data:s,error:l}=await a;if(l)throw l;const r={total:(s==null?void 0:s.length)||0,byStatus:{},byPriority:{},totalAmount:0,avgAmount:0,recentClaims:0},c=new Date;return c==null||c.setDate((c==null?void 0:c.getDate())-30),s==null||s.forEach(o=>{var u,d;r.byStatus[o.status]=(((u=r==null?void 0:r.byStatus)==null?void 0:u[o==null?void 0:o.status])||0)+1,r.byPriority[o.priority]=(((d=r==null?void 0:r.byPriority)==null?void 0:d[o==null?void 0:o.priority])||0)+1,o!=null&&o.claim_amount&&(r.totalAmount+=parseFloat(o==null?void 0:o.claim_amount)),new Date(o.created_at)>c&&r.recentClaims++}),r.avgAmount=(r==null?void 0:r.total)>0?(r==null?void 0:r.totalAmount)/(r==null?void 0:r.total):0,r}catch(a){throw new Error(`Failed to fetch claims statistics: ${a.message}`)}},async getStaff(n=null){var i,t,a,s,l;try{let r=(l=(s=(a=(t=(i=g)==null?void 0:i.from("user_profiles"))==null?void 0:t.select("id, full_name, email, role"))==null?void 0:a.in("role",["admin","manager","staff"]))==null?void 0:s.eq("is_active",!0))==null?void 0:l.order("full_name");n&&(r=r==null?void 0:r.eq("org_id",n));const{data:c,error:o}=await r;if(o)throw o;return c||[]}catch(r){throw new Error(`Failed to fetch staff: ${r.message}`)}}};export{$ as c};
//# sourceMappingURL=claimsService-Cwr1hqzn.js.map
