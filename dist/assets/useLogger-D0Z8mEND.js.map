{"version":3,"file":"useLogger-D0Z8mEND.js","sources":["../../src/utils/logger.js","../../src/hooks/useLogger.js"],"sourcesContent":["// Application-wide logging utility for automotive aftermarket system\r\nimport { supabase } from '@/lib/supabase'\r\n\r\n/**\r\n * Log levels for different types of events\r\n */\r\nexport const LOG_LEVELS = {\r\n  INFO: 'info',\r\n  WARN: 'warning',\r\n  ERROR: 'error',\r\n  DEBUG: 'debug',\r\n  SUCCESS: 'success',\r\n}\r\n\r\n/**\r\n * Entity types for logging\r\n */\r\nexport const ENTITY_TYPES = {\r\n  USER: 'user',\r\n  VEHICLE: 'vehicle',\r\n  JOB: 'job',\r\n  TRANSACTION: 'transaction',\r\n  VENDOR: 'vendor',\r\n  PRODUCT: 'product',\r\n  SALE: 'sale',\r\n  SYSTEM: 'system',\r\n}\r\n\r\n/**\r\n * Action types for comprehensive tracking\r\n */\r\nexport const ACTION_TYPES = {\r\n  // User actions\r\n  LOGIN: 'login',\r\n  LOGOUT: 'logout',\r\n\r\n  // CRUD operations\r\n  CREATE: 'create',\r\n  UPDATE: 'update',\r\n  DELETE: 'delete',\r\n  VIEW: 'view',\r\n\r\n  // Status changes\r\n  STATUS_CHANGE: 'status_changed',\r\n\r\n  // Sales tracking specific\r\n  SALE_CREATED: 'sale_created',\r\n  SALE_UPDATED: 'sale_updated',\r\n  SALE_DELETED: 'sale_deleted',\r\n  SERVICE_ADDED: 'service_added',\r\n  SERVICE_REMOVED: 'service_removed',\r\n\r\n  // Vehicle operations\r\n  VEHICLE_ADDED: 'vehicle_added',\r\n  VEHICLE_UPDATED: 'vehicle_updated',\r\n\r\n  // Job operations\r\n  JOB_ASSIGNED: 'job_assigned',\r\n  JOB_STARTED: 'job_started',\r\n  JOB_COMPLETED: 'job_completed',\r\n\r\n  // System events\r\n  SYSTEM_ERROR: 'system_error',\r\n  API_CALL: 'api_call',\r\n  PAGE_LOAD: 'page_load',\r\n}\r\n\r\n/**\r\n * Enhanced logging class for automotive aftermarket system\r\n */\r\nclass AppLogger {\r\n  constructor() {\r\n    this.isEnabled = true\r\n    // Determine dev mode safely across Vite (browser) and Node (tests)\r\n    let isDev = false\r\n    try {\r\n      // Vite exposes import.meta.env.DEV in the browser\r\n      // Guard in case import.meta is not available (older tooling)\r\n      // eslint-disable-next-line no-undef\r\n      isDev = Boolean(typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.DEV)\r\n    } catch (_) {\r\n      // no-op\r\n    }\r\n    if (!isDev && typeof process !== 'undefined') {\r\n      // Fallback for Node/test environments\r\n      isDev = process.env?.NODE_ENV === 'development'\r\n    }\r\n    this.consoleEnabled = isDev\r\n  }\r\n\r\n  /**\r\n   * Helper function to validate and convert entity ID to UUID format\r\n   * @param {string} entityId - The entity ID to validate\r\n   * @param {string} entityType - The entity type for context\r\n   * @returns {string|null} - Valid UUID or null if invalid\r\n   */\r\n  validateEntityId(entityId, entityType) {\r\n    if (!entityId) return null\r\n\r\n    // Check if it's already a valid UUID format\r\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\r\n    if (uuidRegex?.test(entityId)) {\r\n      return entityId\r\n    }\r\n\r\n    // For system/string entities, return null to skip database logging\r\n    // These will only be logged to console\r\n    if (\r\n      typeof entityId === 'string' &&\r\n      (entityId === 'system' ||\r\n        entityId === 'error' ||\r\n        entityType === 'system' ||\r\n        entityId?.includes('-api') ||\r\n        entityId === 'anonymous' ||\r\n        entityId === 'bulk')\r\n    ) {\r\n      return null\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Main logging method that handles both console and database logging\r\n   * @param {string} level - Log level (info, warning, error, etc.)\r\n   * @param {string} action - Action type from ACTION_TYPES\r\n   * @param {string} entityType - Entity type from ENTITY_TYPES\r\n   * @param {string} entityId - ID of the entity being logged\r\n   * @param {string} description - Human readable description\r\n   * @param {Object} additionalData - Extra data to log\r\n   */\r\n  async log(level, action, entityType, entityId, description, additionalData = {}) {\r\n    if (!this.isEnabled) return\r\n\r\n    const logEntry = {\r\n      level,\r\n      action,\r\n      entityType,\r\n      entityId,\r\n      description,\r\n      timestamp: new Date()?.toISOString(),\r\n      ...additionalData,\r\n    }\r\n\r\n    // Console logging for development\r\n    if (this.consoleEnabled) {\r\n      const consoleMethod = this.getConsoleMethod(level)\r\n      consoleMethod(`[${level?.toUpperCase()}] ${action} on ${entityType}:`, logEntry)\r\n    }\r\n\r\n    // Database logging via activity_history table\r\n    try {\r\n      await this.logToDatabase(action, entityType, entityId, description, additionalData)\r\n    } catch (error) {\r\n      console.error('Failed to log to database:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log to Supabase activity_history table\r\n   */\r\n  async logToDatabase(action, entityType, entityId, description, additionalData = {}) {\r\n    try {\r\n      const validEntityId = this.validateEntityId(entityId, entityType)\r\n\r\n      // Skip database logging for invalid entity IDs (system events, etc.)\r\n      if (!validEntityId) {\r\n        if (this.consoleEnabled) {\r\n          console.debug('Skipping database logging for system event:', {\r\n            action,\r\n            entityType,\r\n            entityId,\r\n          })\r\n        }\r\n        return\r\n      }\r\n\r\n      const { data: userData } = await supabase?.auth?.getUser()\r\n\r\n      const logData = {\r\n        action,\r\n        entity_type: entityType,\r\n        entity_id: validEntityId,\r\n        description,\r\n        old_values: additionalData?.oldValues || null,\r\n        new_values: additionalData?.newValues || null,\r\n        performed_by: userData?.user?.id || null,\r\n      }\r\n\r\n      const { error } = await supabase?.from('activity_history')?.insert([logData])\r\n\r\n      if (error) {\r\n        console.error('Database logging error:', error)\r\n      }\r\n    } catch (error) {\r\n      console.error('Database logging failed:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get appropriate console method based on log level\r\n   */\r\n  getConsoleMethod(level) {\r\n    switch (level) {\r\n      case LOG_LEVELS?.ERROR:\r\n        return console.error\r\n      case LOG_LEVELS?.WARN:\r\n        return console.warn\r\n      case LOG_LEVELS?.DEBUG:\r\n        return console.debug\r\n      default:\r\n        return console.log\r\n    }\r\n  }\r\n\r\n  // Convenience methods for different log levels\r\n  async info(action, entityType, entityId, description, additionalData = {}) {\r\n    return this.log(LOG_LEVELS?.INFO, action, entityType, entityId, description, additionalData)\r\n  }\r\n\r\n  async warn(action, entityType, entityId, description, additionalData = {}) {\r\n    return this.log(LOG_LEVELS?.WARN, action, entityType, entityId, description, additionalData)\r\n  }\r\n\r\n  async error(action, entityType, entityId, description, additionalData = {}) {\r\n    return this.log(LOG_LEVELS?.ERROR, action, entityType, entityId, description, additionalData)\r\n  }\r\n\r\n  async success(action, entityType, entityId, description, additionalData = {}) {\r\n    return this.log(LOG_LEVELS?.SUCCESS, action, entityType, entityId, description, additionalData)\r\n  }\r\n\r\n  async debug(action, entityType, entityId, description, additionalData = {}) {\r\n    return this.log(LOG_LEVELS?.DEBUG, action, entityType, entityId, description, additionalData)\r\n  }\r\n\r\n  // Specific business logic logging methods\r\n  async logSaleCreation(saleId, saleData, userId) {\r\n    return this.info(\r\n      ACTION_TYPES?.SALE_CREATED,\r\n      ENTITY_TYPES?.SALE,\r\n      saleId,\r\n      `New sale created for vehicle ${saleData?.stockNumber || 'Unknown'}`,\r\n      {\r\n        newValues: saleData,\r\n        userId,\r\n        vehicleInfo: {\r\n          stockNumber: saleData?.stockNumber,\r\n          year: saleData?.year,\r\n          make: saleData?.make,\r\n          model: saleData?.model,\r\n        },\r\n      }\r\n    )\r\n  }\r\n\r\n  async logSaleUpdate(saleId, oldData, newData, userId) {\r\n    return this.info(\r\n      ACTION_TYPES?.SALE_UPDATED,\r\n      ENTITY_TYPES?.SALE,\r\n      saleId,\r\n      `Sale updated for ${oldData?.stockNumber || 'Unknown vehicle'}`,\r\n      {\r\n        oldValues: oldData,\r\n        newValues: newData,\r\n        userId,\r\n      }\r\n    )\r\n  }\r\n\r\n  async logServiceChange(saleId, serviceName, action, userId) {\r\n    const description =\r\n      action === 'added'\r\n        ? `Service \"${serviceName}\" added to sale`\r\n        : `Service \"${serviceName}\" removed from sale`\r\n\r\n    return this.info(\r\n      action === 'added' ? ACTION_TYPES?.SERVICE_ADDED : ACTION_TYPES?.SERVICE_REMOVED,\r\n      ENTITY_TYPES?.SALE,\r\n      saleId,\r\n      description,\r\n      { serviceName, userId }\r\n    )\r\n  }\r\n\r\n  async logUserAction(action, userId, details = {}) {\r\n    return this.info(action, ENTITY_TYPES?.USER, userId, `User ${action}`, details)\r\n  }\r\n\r\n  async logPageLoad(pageName, userId) {\r\n    return this.debug(\r\n      ACTION_TYPES?.PAGE_LOAD,\r\n      ENTITY_TYPES?.SYSTEM,\r\n      'system',\r\n      `User loaded ${pageName} page`,\r\n      { pageName, userId }\r\n    )\r\n  }\r\n\r\n  async logError(error, context = {}) {\r\n    return this.error(\r\n      ACTION_TYPES?.SYSTEM_ERROR,\r\n      ENTITY_TYPES?.SYSTEM,\r\n      'system',\r\n      `System error: ${error?.message || 'Unknown error'}`,\r\n      {\r\n        errorStack: error?.stack,\r\n        errorMessage: error?.message,\r\n        context,\r\n      }\r\n    )\r\n  }\r\n\r\n  // Batch logging for multiple events\r\n  async logBatch(logEntries) {\r\n    const promises = logEntries?.map((entry) =>\r\n      this.log(\r\n        entry?.level,\r\n        entry?.action,\r\n        entry?.entityType,\r\n        entry?.entityId,\r\n        entry?.description,\r\n        entry?.additionalData\r\n      )\r\n    )\r\n\r\n    try {\r\n      await Promise.allSettled(promises)\r\n    } catch (error) {\r\n      console.error('Batch logging failed:', error)\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst logger = new AppLogger()\r\n\r\n// Export singleton and classes/constants\r\nexport default logger\r\nexport { AppLogger }\r\n","import { useCallback } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport logger, { ACTION_TYPES, ENTITY_TYPES, LOG_LEVELS } from '../utils/logger';\r\n\r\n/**\r\n * Custom hook for component-level logging with automatic user context\r\n * Provides easy-to-use logging methods that automatically include user info\r\n */\r\nexport const useLogger = () => {\r\n  const { user } = useAuth();\r\n\r\n  // Automatic user context logging\r\n  const logWithUser = useCallback(async (level, action, entityType, entityId, description, additionalData = {}) => {\r\n    const enhancedData = {\r\n      ...additionalData,\r\n      userId: user?.id,\r\n      userEmail: user?.email\r\n    };\r\n\r\n    return logger?.log(level, action, entityType, entityId, description, enhancedData);\r\n  }, [user]);\r\n\r\n  // Component-specific logging methods\r\n  const logComponentAction = useCallback(async (componentName, action, details = {}) => {\r\n    return logWithUser(\r\n      LOG_LEVELS?.INFO,\r\n      action,\r\n      ENTITY_TYPES?.SYSTEM,\r\n      null, // Use null instead of componentName to skip database logging\r\n      `Component action: ${componentName} - ${action}`,\r\n      { componentName, ...details }\r\n    );\r\n  }, [logWithUser]);\r\n\r\n  const logUserInteraction = useCallback(async (element, action, details = {}) => {\r\n    return logWithUser(\r\n      LOG_LEVELS?.INFO,\r\n      action,\r\n      ENTITY_TYPES?.USER,\r\n      user?.id || null, // Use null instead of 'anonymous'\r\n      `User clicked ${element}`,\r\n      { element, ...details }\r\n    );\r\n  }, [logWithUser, user]);\r\n\r\n  const logFormSubmission = useCallback(async (formName, formData, isSuccess = true) => {\r\n    return logWithUser(\r\n      isSuccess ? LOG_LEVELS?.SUCCESS : LOG_LEVELS?.ERROR,\r\n      'form_submit',\r\n      ENTITY_TYPES?.SYSTEM,\r\n      null, // Use null instead of formName to skip database logging\r\n      `Form ${formName} ${isSuccess ? 'submitted successfully' : 'submission failed'}`,\r\n      { formName, formData: formData, success: isSuccess }\r\n    );\r\n  }, [logWithUser]);\r\n\r\n  const logPageView = useCallback(async (pageName, additionalContext = {}) => {\r\n    return logWithUser(\r\n      LOG_LEVELS?.INFO,\r\n      ACTION_TYPES?.PAGE_LOAD,\r\n      ENTITY_TYPES?.SYSTEM,\r\n      null, // Use null instead of pageName to skip database logging\r\n      `Page viewed: ${pageName}`,\r\n      { pageName, ...additionalContext }\r\n    );\r\n  }, [logWithUser]);\r\n\r\n  const logBusinessAction = useCallback(async (action, entityType, entityId, description, data = {}) => {\r\n    return logWithUser(\r\n      LOG_LEVELS?.INFO,\r\n      action,\r\n      entityType,\r\n      entityId,\r\n      description,\r\n      data\r\n    );\r\n  }, [logWithUser]);\r\n\r\n  // Error logging with automatic error handling\r\n  const logError = useCallback(async (error, context = {}) => {\r\n    return logWithUser(\r\n      LOG_LEVELS?.ERROR,\r\n      ACTION_TYPES?.SYSTEM_ERROR,\r\n      ENTITY_TYPES?.SYSTEM,\r\n      null, // Use null instead of 'error' string\r\n      `Error occurred: ${error?.message || 'Unknown error'}`,\r\n      {\r\n        errorMessage: error?.message,\r\n        errorStack: error?.stack,\r\n        context\r\n      }\r\n    );\r\n  }, [logWithUser]);\r\n\r\n  // Sales-specific logging methods\r\n  const logSalesAction = useCallback(async (action, saleId, description, data = {}) => {\r\n    return logWithUser(\r\n      LOG_LEVELS?.INFO,\r\n      action,\r\n      ENTITY_TYPES?.SALE,\r\n      saleId,\r\n      description,\r\n      data\r\n    );\r\n  }, [logWithUser]);\r\n\r\n  const logVehicleAction = useCallback(async (action, vehicleId, description, data = {}) => {\r\n    return logWithUser(\r\n      LOG_LEVELS?.INFO,\r\n      action,\r\n      ENTITY_TYPES?.VEHICLE,\r\n      vehicleId,\r\n      description,\r\n      data\r\n    );\r\n  }, [logWithUser]);\r\n\r\n  const logJobAction = useCallback(async (action, jobId, description, data = {}) => {\r\n    return logWithUser(\r\n      LOG_LEVELS?.INFO,\r\n      action,\r\n      ENTITY_TYPES?.JOB,\r\n      jobId,\r\n      description,\r\n      data\r\n    );\r\n  }, [logWithUser]);\r\n\r\n  return {\r\n    // Core logging methods\r\n    logComponentAction,\r\n    logUserInteraction,\r\n    logFormSubmission,\r\n    logPageView,\r\n    logBusinessAction,\r\n    logError,\r\n    \r\n    // Domain-specific logging\r\n    logSalesAction,\r\n    logVehicleAction,\r\n    logJobAction,\r\n    \r\n    // Direct access to logger for advanced usage\r\n    logger,\r\n    \r\n    // Utility methods\r\n    logInfo: useCallback((action, entityType, entityId, description, data) => \r\n      logWithUser(LOG_LEVELS?.INFO, action, entityType, entityId, description, data), [logWithUser]),\r\n    logWarning: useCallback((action, entityType, entityId, description, data) => \r\n      logWithUser(LOG_LEVELS?.WARN, action, entityType, entityId, description, data), [logWithUser]),\r\n    logSuccess: useCallback((action, entityType, entityId, description, data) => \r\n      logWithUser(LOG_LEVELS?.SUCCESS, action, entityType, entityId, description, data), [logWithUser])\r\n  };\r\n};\r\n\r\nexport default useLogger;"],"names":["define_import_meta_env_default","useLogger","user","useAuth","logWithUser","useCallback","level","action","entityType","entityId","description","additionalData","enhancedData","logger","logComponentAction","componentName","details","LOG_LEVELS","ENTITY_TYPES","logUserInteraction","element","logFormSubmission","formName","formData","isSuccess","logPageView","pageName","additionalContext","ACTION_TYPES","logBusinessAction","data","logError","error","context","logSalesAction","saleId","logVehicleAction","vehicleId","logJobAction","jobId"],"mappings":"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"}