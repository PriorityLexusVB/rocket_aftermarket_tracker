{"version":3,"file":"dealService-CugeVm6A.js","sources":["../../src/services/dealService.js"],"sourcesContent":["// src/services/dealService.js\r\nimport { supabase } from '@/lib/supabase'\r\n\r\n// --- helpers -------------------------------------------------------------\r\n\r\n// Only pass columns we're confident exist on your `jobs` table.\r\n// Add more keys here if you confirm additional columns.\r\nconst JOB_COLS = [\r\n  'job_number',\r\n  'title',\r\n  'description',\r\n  'vehicle_id',\r\n  'vendor_id',\r\n  'job_status',\r\n  'priority',\r\n  'location',\r\n  'scheduled_start_time',\r\n  'scheduled_end_time',\r\n  'estimated_hours',\r\n  'estimated_cost',\r\n  'actual_cost',\r\n  'customer_needs_loaner', // ✅ CONFIRMED: This column exists\r\n  'service_type',\r\n  'delivery_coordinator_id',\r\n  'finance_manager_id', // ✅ ADDED: Missing from previous list\r\n  'assigned_to',\r\n  // Optional multi-tenant scoping when present\r\n  'org_id',\r\n]\r\n\r\nfunction pick(obj, keys) {\r\n  const out = {}\r\n  keys?.forEach((k) => {\r\n    if (obj?.[k] !== undefined) out[k] = obj?.[k]\r\n  })\r\n  return out\r\n}\r\n\r\nfunction sanitizeDealPayload(input) {\r\n  const out = pick(input || {}, JOB_COLS)\r\n  // Generic: coerce empty-string primitives to null so DB types (uuid/timestamp/numeric) don't error\r\n  Object.keys(out).forEach((k) => {\r\n    if (out[k] === '') out[k] = null\r\n  })\r\n  return out\r\n}\r\n\r\n// Internal helper: load a fully-joined deal/job by id\r\nasync function selectJoinedDealById(id) {\r\n  const { data: job, error: jobError } = await supabase\r\n    ?.from('jobs')\r\n    ?.select(\r\n      `\r\n        id, job_number, title, description, job_status, priority, location,\r\n        vehicle_id, vendor_id, scheduled_start_time, scheduled_end_time,\r\n        estimated_hours, estimated_cost, actual_cost, customer_needs_loaner,\r\n        service_type, delivery_coordinator_id, assigned_to, created_at, finance_manager_id,\r\n        vehicle:vehicles(id, year, make, model, stock_number),\r\n        vendor:vendors(id, name),\r\n        job_parts(id, product_id, unit_price, quantity_used, promised_date, requires_scheduling, no_schedule_reason, is_off_site, product:products(id, name, category, brand))\r\n      `\r\n    )\r\n    ?.eq('id', id)\r\n    ?.single()\r\n\r\n  if (jobError) throw new Error(`Failed to load deal: ${jobError.message}`)\r\n  return job\r\n}\r\n\r\n// Map UI form state into DB-friendly pieces: job payload, normalized lineItems, loaner form\r\nfunction mapFormToDb(formState = {}) {\r\n  // Base payload constrained to known columns\r\n  const base = sanitizeDealPayload(formState || {})\r\n\r\n  // Optional tenant scoping if provided by caller\r\n  const orgId = formState?.org_id ?? formState?.orgId\r\n  const payload = orgId ? { ...base, org_id: orgId } : base\r\n\r\n  // Accept either lineItems (current UI) or line_items (alternate callers)\r\n  const lineItemsInput = Array.isArray(formState?.line_items)\r\n    ? formState?.line_items\r\n    : Array.isArray(formState?.lineItems)\r\n      ? formState?.lineItems\r\n      : []\r\n\r\n  const normalizedLineItems = (lineItemsInput || []).map((li) => ({\r\n    product_id: li.product_id ?? null,\r\n    quantity_used: Number(li.quantity_used ?? li.quantity ?? 1),\r\n    unit_price: Number(li.unit_price ?? li.price ?? 0),\r\n    // snake_case for DB\r\n    promised_date: li.promised_date || li.lineItemPromisedDate || null,\r\n    requires_scheduling: !!li.requires_scheduling || !!li.requiresScheduling,\r\n    no_schedule_reason: li.no_schedule_reason || li.noScheduleReason || null,\r\n    is_off_site: !!li.is_off_site || !!li.isOffSite,\r\n    // keep camelCase too for internal callers\r\n    lineItemPromisedDate: li.lineItemPromisedDate || li.promised_date || null,\r\n    requiresScheduling: !!li.requiresScheduling || !!li.requires_scheduling,\r\n    noScheduleReason: li.noScheduleReason || li.no_schedule_reason || null,\r\n    isOffSite: !!li.isOffSite || !!li.is_off_site,\r\n  }))\r\n\r\n  // Coerce invalid numerics and enforce business rules\r\n  for (const item of normalizedLineItems) {\r\n    if (Number.isNaN(item.quantity_used) || item.quantity_used == null) item.quantity_used = 1\r\n    if (Number.isNaN(item.unit_price) || item.unit_price == null) item.unit_price = 0\r\n    // Business rule: if not scheduling, reason is required\r\n    if (!item.requires_scheduling && !String(item.no_schedule_reason || '').trim()) {\r\n      throw new Error('Each non-scheduled line item must include a reason')\r\n    }\r\n  }\r\n\r\n  // Safety: require at least one product line item when any line items are provided\r\n  if ((normalizedLineItems?.length || 0) > 0) {\r\n    const hasProduct = normalizedLineItems.some((it) => !!it.product_id)\r\n    if (!hasProduct) throw new Error('At least one product is required')\r\n  }\r\n\r\n  // Contract-friendly jobParts for callers that expect quantity + total_price (UI keeps snake_case)\r\n  const jobParts = (normalizedLineItems || []).map((it) => ({\r\n    product_id: it.product_id,\r\n    quantity: Number(it.quantity_used ?? 1),\r\n    unit_price: Number(it.unit_price ?? 0),\r\n    total_price: Number(it.unit_price ?? 0) * Number(it.quantity_used ?? 1),\r\n    // Preserve UI snake_case so consumers don't lose fields\r\n    quantity_used: it.quantity_used,\r\n    promised_date: it.promised_date,\r\n    requires_scheduling: it.requires_scheduling,\r\n    no_schedule_reason: it.no_schedule_reason,\r\n    is_off_site: it.is_off_site,\r\n  }))\r\n\r\n  const loanerForm = formState?.loanerForm || null\r\n\r\n  // customer fields normalization\r\n  const customerName = formState?.customerName?.trim() || formState?.customer_name?.trim?.() || ''\r\n  const customerPhone =\r\n    formState?.customerPhone?.trim() || formState?.customer_phone?.trim?.() || ''\r\n  const customerEmail =\r\n    formState?.customerEmail?.trim() || formState?.customer_email?.trim?.() || ''\r\n\r\n  return {\r\n    // Back-compat keys used internally\r\n    payload,\r\n    normalizedLineItems,\r\n    // New contract-friendly keys (non-breaking additions)\r\n    jobPayload: payload,\r\n    jobParts,\r\n    // Extras\r\n    loanerForm,\r\n    customerName,\r\n    customerPhone,\r\n    customerEmail,\r\n  }\r\n}\r\n\r\n// Normalize line items to match `job_parts` columns we know are present.\r\n// ✅ FIXED: Remove total_price as it's auto-generated\r\nexport function toJobPartRows(jobId, items = []) {\r\n  return (\r\n    // drop null-only rows\r\n    (items || [])\r\n      ?.map((it) => ({\r\n        job_id: jobId,\r\n        product_id: it?.product_id ?? null,\r\n        quantity_used: it?.quantity_used ?? it?.quantity ?? 1,\r\n        unit_price: it?.unit_price ?? it?.price ?? 0,\r\n        // Add new per-line-item scheduling fields\r\n        promised_date:\r\n          it?.lineItemPromisedDate ||\r\n          // If requires scheduling and no date provided, default to today to satisfy DB constraint\r\n          (it?.requiresScheduling ? new Date().toISOString().slice(0, 10) : null),\r\n        requires_scheduling: !!it?.requiresScheduling,\r\n        no_schedule_reason: it?.requiresScheduling ? null : it?.noScheduleReason || null,\r\n        is_off_site: !!it?.isOffSite,\r\n        // ✅ REMOVED: total_price as it's auto-generated by database\r\n        // ✅ REMOVED: description field as it doesn't exist in schema\r\n      }))\r\n      ?.filter((row) => row?.product_id !== null || row?.quantity_used || row?.unit_price)\r\n  )\r\n}\r\n\r\n// A3: Enhanced UPSERT loaner assignment function\r\nasync function upsertLoanerAssignment(jobId, loanerData) {\r\n  if (!loanerData?.loaner_number?.trim()) {\r\n    return // No loaner number provided, skip assignment\r\n  }\r\n\r\n  try {\r\n    // Check for existing active assignment for this job\r\n    const { data: existing } = await supabase\r\n      ?.from('loaner_assignments')\r\n      ?.select('id')\r\n      ?.eq('job_id', jobId)\r\n      ?.is('returned_at', null)\r\n      ?.single()\r\n\r\n    const assignmentData = {\r\n      job_id: jobId,\r\n      loaner_number: loanerData?.loaner_number?.trim(),\r\n      eta_return_date: loanerData?.eta_return_date || null,\r\n      notes: loanerData?.notes?.trim() || null,\r\n    }\r\n\r\n    if (existing) {\r\n      // Update existing assignment\r\n      const { error } = await supabase\r\n        ?.from('loaner_assignments')\r\n        ?.update(assignmentData)\r\n        ?.eq('id', existing?.id)\r\n\r\n      if (error) throw error\r\n    } else {\r\n      // Create new assignment\r\n      const { error } = await supabase?.from('loaner_assignments')?.insert([assignmentData])\r\n\r\n      if (error) throw error\r\n    }\r\n  } catch (error) {\r\n    // Handle uniqueness constraint error gracefully\r\n    if (error?.code === '23505') {\r\n      throw new Error(\r\n        `Loaner ${loanerData?.loaner_number} is already assigned to another active job`\r\n      )\r\n    }\r\n    throw error\r\n  }\r\n}\r\n\r\n// ✅ FIXED: Updated getAllDeals to remove SQL RPC dependency and use direct queries\r\nexport async function getAllDeals() {\r\n  try {\r\n    // Use direct Supabase queries instead of SQL RPC function\r\n    const { data: jobs, error: jobsError } = await supabase\r\n      ?.from('jobs')\r\n      ?.select(\r\n        `\r\n        id, created_at, job_status, service_type, color_code, title, job_number,\r\n        customer_needs_loaner, assigned_to, delivery_coordinator_id, finance_manager_id,\r\n        vehicle:vehicles(year, make, model, stock_number),\r\n        job_parts(id, product_id, unit_price, quantity_used, promised_date, requires_scheduling, no_schedule_reason, is_off_site)\r\n      `\r\n      )\r\n      ?.in('job_status', ['draft', 'pending', 'in_progress', 'completed'])\r\n      ?.order('created_at', { ascending: false })\r\n\r\n    if (jobsError) throw jobsError\r\n\r\n    // Get transactions and loaner assignments separately for better performance\r\n    const jobIds = jobs?.map((j) => j?.id) || []\r\n\r\n    const [transactionsResult, loanersResult] = await Promise.all([\r\n      supabase\r\n        ?.from('transactions')\r\n        ?.select('job_id, customer_name, customer_phone, customer_email, total_amount')\r\n        ?.in('job_id', jobIds),\r\n      supabase\r\n        ?.from('loaner_assignments')\r\n        ?.select('job_id, id, loaner_number, eta_return_date')\r\n        ?.in('job_id', jobIds)\r\n        ?.is('returned_at', null),\r\n    ])\r\n\r\n    const transactions = transactionsResult?.data || []\r\n    const loaners = loanersResult?.data || []\r\n\r\n    // Process and enhance the data\r\n    return (\r\n      jobs?.map((job) => {\r\n        const transaction = transactions?.find((t) => t?.job_id === job?.id)\r\n        const loaner = loaners?.find((l) => l?.job_id === job?.id)\r\n\r\n        // Calculate next promised date from job parts\r\n        const schedulingParts =\r\n          job?.job_parts?.filter((part) => part?.requires_scheduling && part?.promised_date) || []\r\n        const nextPromisedDate =\r\n          schedulingParts?.length > 0\r\n            ? schedulingParts?.sort(\r\n                (a, b) => new Date(a.promised_date) - new Date(b.promised_date)\r\n              )?.[0]?.promised_date\r\n            : null\r\n\r\n        return {\r\n          ...job,\r\n          customer_name: transaction?.customer_name || '',\r\n          customer_phone: transaction?.customer_phone || '',\r\n          customer_email: transaction?.customer_email || '',\r\n          total_amount: transaction?.total_amount || 0,\r\n          next_promised_short: nextPromisedDate\r\n            ? new Date(nextPromisedDate)?.toLocaleDateString('en-US', {\r\n                month: 'short',\r\n                day: 'numeric',\r\n              })\r\n            : null,\r\n          loaner_id: loaner?.id || null,\r\n          loaner_number: loaner?.loaner_number || null,\r\n          loaner_eta_short: loaner?.eta_return_date\r\n            ? new Date(loaner?.eta_return_date)?.toLocaleDateString('en-US', {\r\n                month: 'short',\r\n                day: 'numeric',\r\n              })\r\n            : null,\r\n          vehicle:\r\n            job?.vehicle_id && job?.vehicle\r\n              ? {\r\n                  year: job?.vehicle?.year,\r\n                  make: job?.vehicle?.make,\r\n                  model: job?.vehicle?.model,\r\n                  stock_number: job?.vehicle?.stock_number,\r\n                }\r\n              : null,\r\n          stock_no: job?.vehicle?.stock_number,\r\n        }\r\n      }) || []\r\n    )\r\n  } catch (error) {\r\n    console.error('Failed to load deals:', error)\r\n    throw new Error(`Failed to load deals: ${error?.message}`)\r\n  }\r\n}\r\n\r\n// ✅ FIXED: Updated getDeal to remove SQL RPC dependency\r\nexport async function getDeal(id) {\r\n  try {\r\n    // Centralized joined selector\r\n    const job = await selectJoinedDealById(id)\r\n\r\n    // Get transaction data separately\r\n    const { data: transaction } = await supabase\r\n      ?.from('transactions')\r\n      ?.select('customer_name, customer_phone, customer_email, total_amount')\r\n      ?.eq('job_id', id)\r\n      ?.single()\r\n\r\n    return {\r\n      ...job,\r\n      customer_name: transaction?.customer_name || '',\r\n      customer_phone: transaction?.customer_phone || '',\r\n      customer_email: transaction?.customer_email || '',\r\n      total_amount: transaction?.total_amount || 0,\r\n    }\r\n  } catch (error) {\r\n    console.error('[dealService:get] Failed to get deal:', error)\r\n    throw new Error(`Failed to load deal: ${error?.message}`)\r\n  }\r\n}\r\n\r\n// CREATE: deal + job_parts\r\nexport async function createDeal(formState) {\r\n  const { payload, normalizedLineItems, loanerForm } = mapFormToDb(formState || {})\r\n\r\n  // Ensure required fields the DB expects\r\n  // jobs.job_number is NOT NULL + UNIQUE in schema; auto-generate if missing\r\n  if (!payload?.job_number) {\r\n    const ts = Date.now()\r\n    const rand = Math.floor(Math.random() * 1_0000)\r\n    payload.job_number = `JOB-${ts}-${rand}`\r\n  }\r\n\r\n  // Some DB triggers enforce vendor jobs to have scheduled dates.\r\n  // If this is a vendor job and no scheduled_start_time provided, default to now.\r\n  if (payload?.vendor_id && !payload?.scheduled_start_time) {\r\n    payload.scheduled_start_time = new Date().toISOString()\r\n  }\r\n\r\n  // 1) create job\r\n  const { data: job, error: jobErr } = await supabase\r\n    ?.from('jobs')\r\n    ?.insert([payload])\r\n    ?.select('id')\r\n    ?.single()\r\n  if (jobErr) throw new Error(`Failed to create deal: ${jobErr.message}`)\r\n\r\n  try {\r\n    // 2) insert parts (if any)\r\n    if ((normalizedLineItems || []).length > 0) {\r\n      const rows = toJobPartRows(job?.id, normalizedLineItems)\r\n      if (rows?.length > 0) {\r\n        const { error: partsErr } = await supabase?.from('job_parts')?.insert(rows)\r\n        if (partsErr) throw partsErr\r\n      }\r\n    }\r\n\r\n    // A3: Handle loaner assignment for new deals\r\n    if (payload?.customer_needs_loaner && loanerForm) {\r\n      await upsertLoanerAssignment(job?.id, loanerForm)\r\n    }\r\n\r\n    // 3) return full record (with joins)\r\n    return await getDeal(job?.id)\r\n  } catch (error) {\r\n    console.error('[dealService:create] Failed to create deal:', error)\r\n    // rollback best-effort: delete parts first, then job\r\n    try {\r\n      await supabase?.from('job_parts')?.delete()?.eq('job_id', job?.id)\r\n    } catch (_) {\r\n      // ignore\r\n    }\r\n    try {\r\n      await supabase?.from('jobs')?.delete()?.eq('id', job?.id)\r\n    } catch (_) {\r\n      // ignore\r\n    }\r\n    throw new Error(`Failed to create deal: ${error.message}`)\r\n  }\r\n}\r\n\r\n// UPDATE: deal + replace job_parts - FIXED with proper transaction handling and customer data\r\nexport async function updateDeal(id, formState) {\r\n  const { payload, normalizedLineItems, loanerForm, customerName, customerPhone, customerEmail } =\r\n    mapFormToDb(formState || {})\r\n\r\n  // Calculate total deal value for transactions\r\n  const totalDealValue =\r\n    (normalizedLineItems || []).reduce((sum, item) => {\r\n      const qty = Number(item?.quantity_used || item?.quantity || 1)\r\n      const price = Number(item?.unit_price || item?.price || 0)\r\n      return sum + qty * price\r\n    }, 0) || 0\r\n\r\n  // 1) Update job\r\n  const { error: jobErr } = await supabase?.from('jobs')?.update(payload)?.eq('id', id)\r\n  if (jobErr) throw new Error(`Failed to update deal: ${jobErr.message}`)\r\n\r\n  // 2) ✅ ENHANCED: Always upsert transaction with customer data\r\n  const transactionData = {\r\n    job_id: id,\r\n    vehicle_id: payload?.vehicle_id || null,\r\n    total_amount: totalDealValue,\r\n    customer_name: customerName || 'Unknown Customer',\r\n    customer_phone: customerPhone || null,\r\n    customer_email: customerEmail || null,\r\n    transaction_status: 'pending',\r\n  }\r\n\r\n  const { error: txnErr } = await supabase\r\n    ?.from('transactions')\r\n    ?.upsert(transactionData, { onConflict: 'job_id' })\r\n\r\n  if (txnErr) throw new Error(`Failed to upsert transaction: ${txnErr.message}`)\r\n\r\n  // 3) Replace job_parts with new scheduling fields\r\n  // Delete existing\r\n  const { error: delErr } = await supabase?.from('job_parts')?.delete()?.eq('job_id', id)\r\n  if (delErr) throw new Error(`Failed to update line items: ${delErr.message}`)\r\n\r\n  // Insert new (if any)\r\n  if ((normalizedLineItems || []).length > 0) {\r\n    const rows = toJobPartRows(id, normalizedLineItems)\r\n    if (rows?.length > 0) {\r\n      const { error: insErr } = await supabase?.from('job_parts')?.insert(rows)\r\n      if (insErr) throw new Error(`Failed to update line items: ${insErr.message}`)\r\n    }\r\n  }\r\n\r\n  // A3: Handle loaner assignment updates\r\n  if (payload?.customer_needs_loaner && loanerForm) {\r\n    await upsertLoanerAssignment(id, loanerForm)\r\n  }\r\n\r\n  // 4) Return full record (with joins and transaction data)\r\n  return await getDeal(id)\r\n}\r\n\r\n// ✅ UPDATED: Use safe cascade delete function\r\nexport async function deleteDeal(id) {\r\n  const { error } = await supabase?.rpc('delete_job_cascade', { p_job_id: id })\r\n  if (error) throw new Error(`Failed to delete deal: ${error.message}`)\r\n  return true\r\n}\r\n\r\n// UPDATE: status only (handy for quick changes)\r\nexport async function updateDealStatus(id, job_status) {\r\n  const { data, error } = await supabase\r\n    ?.from('jobs')\r\n    ?.update({ job_status })\r\n    ?.eq('id', id)\r\n    ?.select('id, job_status')\r\n    ?.single()\r\n\r\n  if (error) throw new Error(`Failed to update status: ${error.message}`)\r\n  return data\r\n}\r\n\r\n// ✅ ENHANCED: mapDbDealToForm implementation with proper customer data handling\r\nfunction mapDbDealToForm(dbDeal) {\r\n  if (!dbDeal) return null\r\n\r\n  return {\r\n    id: dbDeal?.id,\r\n    job_number: dbDeal?.job_number || '',\r\n    title: dbDeal?.title || '',\r\n    description: dbDeal?.description || '',\r\n    vendor_id: dbDeal?.vendor_id,\r\n    vehicle_id: dbDeal?.vehicle_id,\r\n    job_status: dbDeal?.job_status || 'pending',\r\n    priority: dbDeal?.priority || 'medium',\r\n    scheduled_start_time: dbDeal?.scheduled_start_time || '',\r\n    scheduled_end_time: dbDeal?.scheduled_end_time || '',\r\n    estimated_hours: dbDeal?.estimated_hours || '',\r\n    estimated_cost: dbDeal?.estimated_cost || '',\r\n    actual_cost: dbDeal?.actual_cost || '',\r\n    location: dbDeal?.location || '',\r\n    customer_needs_loaner: !!dbDeal?.customer_needs_loaner,\r\n    assigned_to: dbDeal?.assigned_to,\r\n    delivery_coordinator_id: dbDeal?.delivery_coordinator_id,\r\n    // ✅ ENHANCED: Include customer data from transactions\r\n    customerName: dbDeal?.customer_name || '',\r\n    customerPhone: dbDeal?.customer_phone || '',\r\n    customerEmail: dbDeal?.customer_email || '',\r\n    // Preserve vehicle for header (stock number)\r\n    vehicle: dbDeal?.vehicle || null,\r\n    // Line items in snake_case shape expected by the form/UI\r\n    lineItems: (dbDeal?.job_parts || [])?.map((part) => ({\r\n      product_id: part?.product_id,\r\n      unit_price: part?.unit_price || 0,\r\n      quantity_used: part?.quantity_used || 1,\r\n      promised_date: part?.promised_date || '',\r\n      requires_scheduling: !!part?.requires_scheduling,\r\n      no_schedule_reason: part?.no_schedule_reason || '',\r\n      is_off_site: !!part?.is_off_site,\r\n    })),\r\n  }\r\n}\r\n\r\n// A3: New function to mark loaner as returned\r\nexport async function markLoanerReturned(loanerAssignmentId) {\r\n  try {\r\n    // Use direct update instead of RPC function if it doesn't exist\r\n    const { error } = await supabase\r\n      ?.from('loaner_assignments')\r\n      ?.update({ returned_at: new Date()?.toISOString() })\r\n      ?.eq('id', loanerAssignmentId)\r\n\r\n    if (error) throw error\r\n    return true\r\n  } catch (error) {\r\n    console.error('Failed to mark loaner as returned:', error)\r\n    throw new Error(`Failed to mark loaner as returned: ${error?.message}`)\r\n  }\r\n}\r\n\r\n// Back-compat default export (so both import styles work):\r\nexport const dealService = {\r\n  getAllDeals,\r\n  getDeal,\r\n  createDeal,\r\n  updateDeal,\r\n  deleteDeal,\r\n  updateDealStatus,\r\n}\r\n\r\nexport default dealService\r\n\r\nexport { mapDbDealToForm, mapFormToDb }\r\n"],"names":["JOB_COLS","pick","obj","keys","out","k","sanitizeDealPayload","input","selectJoinedDealById","id","job","jobError","_d","_c","_b","_a","supabase","mapFormToDb","formState","base","orgId","payload","normalizedLineItems","li","item","it","jobParts","loanerForm","customerName","customerPhone","_f","_e","customerEmail","_g","_i","_h","toJobPartRows","jobId","items","row","upsertLoanerAssignment","loanerData","existing","assignmentData","error","_k","_j","_m","_l","getAllDeals","jobs","jobsError","jobIds","j","transactionsResult","loanersResult","transactions","loaners","transaction","t","loaner","l","schedulingParts","part","nextPromisedDate","a","b","getDeal","createDeal","ts","rand","jobErr","rows","partsErr","updateDeal","totalDealValue","sum","qty","price","transactionData","txnErr","delErr","insErr","deleteDeal","updateDealStatus","job_status","data","mapDbDealToForm","dbDeal","markLoanerReturned","loanerAssignmentId","dealService"],"mappings":"gIAOA,MAAMA,EAAW,CACf,aACA,QACA,cACA,aACA,YACA,aACA,WACA,WACA,uBACA,qBACA,kBACA,iBACA,cACA,wBACA,eACA,0BACA,qBACA,cAEA,QACF,EAEA,SAASC,EAAKC,EAAKC,EAAM,CACvB,MAAMC,EAAM,CAAA,EACZ,OAAAD,GAAA,MAAAA,EAAM,QAASE,GAAM,EACfH,GAAA,YAAAA,EAAMG,MAAO,SAAWD,EAAIC,CAAC,EAAIH,GAAA,YAAAA,EAAMG,GAC7C,GACOD,CACT,CAEA,SAASE,EAAoBC,EAAO,CAClC,MAAMH,EAAMH,EAAKM,GAAS,CAAA,EAAIP,CAAQ,EAEtC,cAAO,KAAKI,CAAG,EAAE,QAASC,GAAM,CAC1BD,EAAIC,CAAC,IAAM,KAAID,EAAIC,CAAC,EAAI,KAC9B,CAAC,EACMD,CACT,CAGA,eAAeI,EAAqBC,EAAI,aACtC,KAAM,CAAE,KAAMC,EAAK,MAAOC,CAAQ,EAAK,OAAMC,GAAAC,GAAAC,GAAAC,EAAAC,IAAA,YAAAD,EACzC,KAAK,UADoC,YAAAD,EAEzC,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHyC,YAAAD,EAazC,GAAG,KAAMJ,KAbgC,YAAAG,EAczC,UAEJ,GAAID,EAAU,MAAM,IAAI,MAAM,wBAAwBA,EAAS,OAAO,EAAE,EACxE,OAAOD,CACT,CAGA,SAASO,EAAYC,EAAY,GAAI,uBAEnC,MAAMC,EAAOb,EAAoBY,GAAa,EAAE,EAG1CE,GAAQF,GAAA,YAAAA,EAAW,UAAUA,GAAA,YAAAA,EAAW,OACxCG,EAAUD,EAAQ,CAAE,GAAGD,EAAM,OAAQC,CAAK,EAAKD,EAS/CG,IANiB,MAAM,QAAQJ,GAAA,YAAAA,EAAW,UAAU,EACtDA,GAAA,YAAAA,EAAW,WACX,MAAM,QAAQA,GAAA,YAAAA,EAAW,SAAS,EAChCA,GAAA,YAAAA,EAAW,UACX,CAAA,IAEyC,CAAA,GAAI,IAAKK,IAAQ,CAC9D,WAAYA,EAAG,YAAc,KAC7B,cAAe,OAAOA,EAAG,eAAiBA,EAAG,UAAY,CAAC,EAC1D,WAAY,OAAOA,EAAG,YAAcA,EAAG,OAAS,CAAC,EAEjD,cAAeA,EAAG,eAAiBA,EAAG,sBAAwB,KAC9D,oBAAqB,CAAC,CAACA,EAAG,qBAAuB,CAAC,CAACA,EAAG,mBACtD,mBAAoBA,EAAG,oBAAsBA,EAAG,kBAAoB,KACpE,YAAa,CAAC,CAACA,EAAG,aAAe,CAAC,CAACA,EAAG,UAEtC,qBAAsBA,EAAG,sBAAwBA,EAAG,eAAiB,KACrE,mBAAoB,CAAC,CAACA,EAAG,oBAAsB,CAAC,CAACA,EAAG,oBACpD,iBAAkBA,EAAG,kBAAoBA,EAAG,oBAAsB,KAClE,UAAW,CAAC,CAACA,EAAG,WAAa,CAAC,CAACA,EAAG,WACtC,EAAI,EAGF,UAAWC,KAAQF,EAIjB,IAHI,OAAO,MAAME,EAAK,aAAa,GAAKA,EAAK,eAAiB,QAAMA,EAAK,cAAgB,IACrF,OAAO,MAAMA,EAAK,UAAU,GAAKA,EAAK,YAAc,QAAMA,EAAK,WAAa,GAE5E,CAACA,EAAK,qBAAuB,CAAC,OAAOA,EAAK,oBAAsB,EAAE,EAAE,OACtE,MAAM,IAAI,MAAM,oDAAoD,EAKxE,KAAKF,GAAA,YAAAA,EAAqB,SAAU,GAAK,GAEnC,CADeA,EAAoB,KAAMG,GAAO,CAAC,CAACA,EAAG,UAAU,EAClD,MAAM,IAAI,MAAM,kCAAkC,EAIrE,MAAMC,GAAYJ,GAAuB,CAAA,GAAI,IAAKG,IAAQ,CACxD,WAAYA,EAAG,WACf,SAAU,OAAOA,EAAG,eAAiB,CAAC,EACtC,WAAY,OAAOA,EAAG,YAAc,CAAC,EACrC,YAAa,OAAOA,EAAG,YAAc,CAAC,EAAI,OAAOA,EAAG,eAAiB,CAAC,EAEtE,cAAeA,EAAG,cAClB,cAAeA,EAAG,cAClB,oBAAqBA,EAAG,oBACxB,mBAAoBA,EAAG,mBACvB,YAAaA,EAAG,WACpB,EAAI,EAEIE,GAAaT,GAAA,YAAAA,EAAW,aAAc,KAGtCU,IAAeb,EAAAG,GAAA,YAAAA,EAAW,eAAX,YAAAH,EAAyB,WAAUF,GAAAC,EAAAI,GAAA,YAAAA,EAAW,gBAAX,YAAAJ,EAA0B,OAA1B,YAAAD,EAAA,KAAAC,KAAsC,GACxFe,IACJjB,EAAAM,GAAA,YAAAA,EAAW,gBAAX,YAAAN,EAA0B,WAAUkB,GAAAC,EAAAb,GAAA,YAAAA,EAAW,iBAAX,YAAAa,EAA2B,OAA3B,YAAAD,EAAA,KAAAC,KAAuC,GACvEC,IACJC,EAAAf,GAAA,YAAAA,EAAW,gBAAX,YAAAe,EAA0B,WAAUC,GAAAC,EAAAjB,GAAA,YAAAA,EAAW,iBAAX,YAAAiB,EAA2B,OAA3B,YAAAD,EAAA,KAAAC,KAAuC,GAE7E,MAAO,CAEL,QAAAd,EACA,oBAAAC,EAEA,WAAYD,EACZ,SAAAK,EAEA,WAAAC,EACA,aAAAC,EACA,cAAAC,EACA,cAAAG,CACJ,CACA,CAIO,SAASI,EAAcC,EAAOC,EAAQ,GAAI,SAC/C,OAEGxB,GAAAC,EAAAuB,GAAS,CAAA,IAAT,YAAAvB,EACG,IAAKU,IAAQ,CACb,OAAQY,EACR,YAAYZ,GAAA,YAAAA,EAAI,aAAc,KAC9B,eAAeA,GAAA,YAAAA,EAAI,iBAAiBA,GAAA,YAAAA,EAAI,WAAY,EACpD,YAAYA,GAAA,YAAAA,EAAI,cAAcA,GAAA,YAAAA,EAAI,QAAS,EAE3C,eACEA,GAAA,YAAAA,EAAI,wBAEHA,GAAA,MAAAA,EAAI,mBAAqB,IAAI,OAAO,cAAc,MAAM,EAAG,EAAE,EAAI,MACpE,oBAAqB,CAAC,EAACA,GAAA,MAAAA,EAAI,oBAC3B,mBAAoBA,GAAA,MAAAA,EAAI,mBAAqB,MAAOA,GAAA,YAAAA,EAAI,mBAAoB,KAC5E,YAAa,CAAC,EAACA,GAAA,MAAAA,EAAI,UAG3B,MAhBK,YAAAX,EAiBG,OAAQyB,IAAQA,GAAA,YAAAA,EAAK,cAAe,OAAQA,GAAA,YAAAA,EAAK,iBAAiBA,GAAA,YAAAA,EAAK,YAE/E,CAGA,eAAeC,EAAuBH,EAAOI,EAAY,+BACvD,IAAK1B,EAAA0B,GAAA,YAAAA,EAAY,gBAAZ,MAAA1B,EAA2B,OAIhC,GAAI,CAEF,KAAM,CAAE,KAAM2B,CAAQ,EAAK,OAAMZ,GAAAC,GAAAnB,GAAAC,GAAAC,EAAAE,IAAA,YAAAF,EAC7B,KAAK,wBADwB,YAAAD,EAE7B,OAAO,QAFsB,YAAAD,EAG7B,GAAG,SAAUyB,KAHgB,YAAAN,EAI7B,GAAG,cAAe,QAJW,YAAAD,EAK7B,UAEEa,EAAiB,CACrB,OAAQN,EACR,eAAeJ,EAAAQ,GAAA,YAAAA,EAAY,gBAAZ,YAAAR,EAA2B,OAC1C,iBAAiBQ,GAAA,YAAAA,EAAY,kBAAmB,KAChD,QAAON,EAAAM,GAAA,YAAAA,EAAY,QAAZ,YAAAN,EAAmB,SAAU,IAC1C,EAEI,GAAIO,EAAU,CAEZ,KAAM,CAAE,MAAAE,CAAK,EAAK,OAAMC,GAAAC,GAAAZ,EAAAlB,IAAA,YAAAkB,EACpB,KAAK,wBADe,YAAAY,EAEpB,OAAOH,KAFa,YAAAE,EAGpB,GAAG,KAAMH,GAAA,YAAAA,EAAU,KAEvB,GAAIE,EAAO,MAAMA,CACnB,KAAO,CAEL,KAAM,CAAE,MAAAA,GAAU,OAAMG,GAAAC,EAAAhC,IAAA,YAAAgC,EAAU,KAAK,wBAAf,YAAAD,EAAsC,OAAO,CAACJ,CAAc,IAEpF,GAAIC,EAAO,MAAMA,CACnB,CACF,OAASA,EAAO,CAEd,MAAIA,GAAA,YAAAA,EAAO,QAAS,QACZ,IAAI,MACR,UAAUH,GAAA,YAAAA,EAAY,aAAa,4CAC3C,EAEUG,CACR,CACF,CAGO,eAAeK,GAAc,2BAClC,GAAI,CAEF,KAAM,CAAE,KAAMC,EAAM,MAAOC,CAAS,EAAK,OAAMvC,GAAAC,GAAAC,GAAAC,EAAAC,IAAA,YAAAD,EAC3C,KAAK,UADsC,YAAAD,EAE3C,OACA;AAAA;AAAA;AAAA;AAAA;AAAA,WAH2C,YAAAD,EAU3C,GAAG,aAAc,CAAC,QAAS,UAAW,cAAe,WAAW,KAVrB,YAAAD,EAW3C,MAAM,aAAc,CAAE,UAAW,EAAK,IAE1C,GAAIuC,EAAW,MAAMA,EAGrB,MAAMC,GAASF,GAAA,YAAAA,EAAM,IAAKG,GAAMA,GAAA,YAAAA,EAAG,MAAO,CAAA,EAEpC,CAACC,EAAoBC,CAAa,EAAI,MAAM,QAAQ,IAAI,EAC5DtB,GAAAH,GAAAC,EAAAf,IAAA,YAAAe,EACI,KAAK,kBADT,YAAAD,EAEI,OAAO,yEAFX,YAAAG,EAGI,GAAG,SAAUmB,IACjBP,GAAAC,GAAAZ,GAAAC,EAAAnB,IAAA,YAAAmB,EACI,KAAK,wBADT,YAAAD,EAEI,OAAO,gDAFX,YAAAY,EAGI,GAAG,SAAUM,KAHjB,YAAAP,EAII,GAAG,cAAe,KAC5B,CAAK,EAEKW,GAAeF,GAAA,YAAAA,EAAoB,OAAQ,CAAA,EAC3CG,GAAUF,GAAA,YAAAA,EAAe,OAAQ,CAAA,EAGvC,OACEL,GAAA,YAAAA,EAAM,IAAKxC,GAAQ,yBACjB,MAAMgD,EAAcF,GAAA,YAAAA,EAAc,KAAMG,IAAMA,GAAA,YAAAA,EAAG,WAAWjD,GAAA,YAAAA,EAAK,KAC3DkD,EAASH,GAAA,YAAAA,EAAS,KAAMI,IAAMA,GAAA,YAAAA,EAAG,WAAWnD,GAAA,YAAAA,EAAK,KAGjDoD,IACJ/C,EAAAL,GAAA,YAAAA,EAAK,YAAL,YAAAK,EAAgB,OAAQgD,IAASA,GAAA,YAAAA,EAAM,uBAAuBA,GAAA,YAAAA,EAAM,kBAAkB,CAAA,EAClFC,GACJF,GAAA,YAAAA,EAAiB,QAAS,GACtBjD,GAAAC,EAAAgD,GAAA,YAAAA,EAAiB,KACf,CAACG,EAAGC,IAAM,IAAI,KAAKD,EAAE,aAAa,EAAI,IAAI,KAAKC,EAAE,aAAa,KADhE,YAAApD,EAEI,KAFJ,YAAAD,EAEQ,cACR,KAEN,MAAO,CACL,GAAGH,EACH,eAAegD,GAAA,YAAAA,EAAa,gBAAiB,GAC7C,gBAAgBA,GAAA,YAAAA,EAAa,iBAAkB,GAC/C,gBAAgBA,GAAA,YAAAA,EAAa,iBAAkB,GAC/C,cAAcA,GAAA,YAAAA,EAAa,eAAgB,EAC3C,oBAAqBM,GACjBpD,EAAA,IAAI,KAAKoD,CAAgB,IAAzB,YAAApD,EAA4B,mBAAmB,QAAS,CACtD,MAAO,QACP,IAAK,SACrB,GACc,KACJ,WAAWgD,GAAA,YAAAA,EAAQ,KAAM,KACzB,eAAeA,GAAA,YAAAA,EAAQ,gBAAiB,KACxC,iBAAkBA,GAAA,MAAAA,EAAQ,iBACtB7B,EAAA,IAAI,KAAK6B,GAAA,YAAAA,EAAQ,eAAe,IAAhC,YAAA7B,EAAmC,mBAAmB,QAAS,CAC7D,MAAO,QACP,IAAK,SACrB,GACc,KACJ,QACErB,GAAA,MAAAA,EAAK,aAAcA,GAAA,MAAAA,EAAK,SACpB,CACE,MAAMoB,EAAApB,GAAA,YAAAA,EAAK,UAAL,YAAAoB,EAAc,KACpB,MAAMG,EAAAvB,GAAA,YAAAA,EAAK,UAAL,YAAAuB,EAAc,KACpB,OAAOE,EAAAzB,GAAA,YAAAA,EAAK,UAAL,YAAAyB,EAAc,MACrB,cAAcD,EAAAxB,GAAA,YAAAA,EAAK,UAAL,YAAAwB,EAAc,YAC9C,EACgB,KACN,UAAUY,EAAApC,GAAA,YAAAA,EAAK,UAAL,YAAAoC,EAAc,YAClC,CACM,KAAM,CAAA,CAEV,OAASF,EAAO,CACd,cAAQ,MAAM,wBAAyBA,CAAK,EACtC,IAAI,MAAM,yBAAyBA,GAAA,YAAAA,EAAO,OAAO,EAAE,CAC3D,CACF,CAGO,eAAeuB,EAAQ1D,EAAI,aAChC,GAAI,CAEF,MAAMC,EAAM,MAAMF,EAAqBC,CAAE,EAGnC,CAAE,KAAMiD,CAAW,EAAK,OAAM9C,GAAAC,GAAAC,GAAAC,EAAAC,IAAA,YAAAD,EAChC,KAAK,kBAD2B,YAAAD,EAEhC,OAAO,iEAFyB,YAAAD,EAGhC,GAAG,SAAUJ,KAHmB,YAAAG,EAIhC,UAEJ,MAAO,CACL,GAAGF,EACH,eAAegD,GAAA,YAAAA,EAAa,gBAAiB,GAC7C,gBAAgBA,GAAA,YAAAA,EAAa,iBAAkB,GAC/C,gBAAgBA,GAAA,YAAAA,EAAa,iBAAkB,GAC/C,cAAcA,GAAA,YAAAA,EAAa,eAAgB,CACjD,CACE,OAASd,EAAO,CACd,cAAQ,MAAM,wCAAyCA,CAAK,EACtD,IAAI,MAAM,wBAAwBA,GAAA,YAAAA,EAAO,OAAO,EAAE,CAC1D,CACF,CAGO,eAAewB,EAAWlD,EAAW,6BAC1C,KAAM,CAAE,QAAAG,EAAS,oBAAAC,EAAqB,WAAAK,CAAU,EAAKV,EAAYC,GAAa,EAAE,EAIhF,GAAI,EAACG,GAAA,MAAAA,EAAS,YAAY,CACxB,MAAMgD,EAAK,KAAK,IAAG,EACbC,EAAO,KAAK,MAAM,KAAK,OAAM,EAAK,GAAM,EAC9CjD,EAAQ,WAAa,OAAOgD,CAAE,IAAIC,CAAI,EACxC,CAIIjD,GAAA,MAAAA,EAAS,WAAa,EAACA,GAAA,MAAAA,EAAS,wBAClCA,EAAQ,qBAAuB,IAAI,KAAI,EAAG,YAAW,GAIvD,KAAM,CAAE,KAAMX,EAAK,MAAO6D,CAAM,EAAK,OAAM3D,GAAAC,GAAAC,GAAAC,EAAAC,IAAA,YAAAD,EACvC,KAAK,UADkC,YAAAD,EAEvC,OAAO,CAACO,CAAO,KAFwB,YAAAR,EAGvC,OAAO,QAHgC,YAAAD,EAIvC,UACJ,GAAI2D,EAAQ,MAAM,IAAI,MAAM,0BAA0BA,EAAO,OAAO,EAAE,EAEtE,GAAI,CAEF,IAAKjD,GAAuB,IAAI,OAAS,EAAG,CAC1C,MAAMkD,EAAOpC,EAAc1B,GAAA,YAAAA,EAAK,GAAIY,CAAmB,EACvD,IAAIkD,GAAA,YAAAA,EAAM,QAAS,EAAG,CACpB,KAAM,CAAE,MAAOC,CAAQ,EAAK,OAAM3C,GAAAC,EAAAf,IAAA,YAAAe,EAAU,KAAK,eAAf,YAAAD,EAA6B,OAAO0C,IACtE,GAAIC,EAAU,MAAMA,CACtB,CACF,CAGA,OAAIpD,GAAA,MAAAA,EAAS,uBAAyBM,GACpC,MAAMa,EAAuB9B,GAAA,YAAAA,EAAK,GAAIiB,CAAU,EAI3C,MAAMwC,EAAQzD,GAAA,YAAAA,EAAK,EAAE,CAC9B,OAASkC,EAAO,CACd,QAAQ,MAAM,8CAA+CA,CAAK,EAElE,GAAI,CACF,OAAMV,GAAAC,GAAAF,EAAAjB,IAAA,YAAAiB,EAAU,KAAK,eAAf,YAAAE,EAA6B,WAA7B,YAAAD,EAAuC,GAAG,SAAUxB,GAAA,YAAAA,EAAK,IACjE,MAAY,CAEZ,CACA,GAAI,CACF,OAAMsC,GAAAH,GAAAC,EAAA9B,IAAA,YAAA8B,EAAU,KAAK,UAAf,YAAAD,EAAwB,WAAxB,YAAAG,EAAkC,GAAG,KAAMtC,GAAA,YAAAA,EAAK,IACxD,MAAY,CAEZ,CACA,MAAM,IAAI,MAAM,0BAA0BkC,EAAM,OAAO,EAAE,CAC3D,CACF,CAGO,eAAe8B,EAAWjE,EAAIS,EAAW,yBAC9C,KAAM,CAAE,QAAAG,EAAS,oBAAAC,EAAqB,WAAAK,EAAY,aAAAC,EAAc,cAAAC,EAAe,cAAAG,CAAa,EAC1Ff,EAAYC,GAAa,EAAE,EAGvByD,GACHrD,GAAuB,CAAA,GAAI,OAAO,CAACsD,EAAKpD,IAAS,CAChD,MAAMqD,EAAM,QAAOrD,GAAA,YAAAA,EAAM,iBAAiBA,GAAA,YAAAA,EAAM,WAAY,CAAC,EACvDsD,EAAQ,QAAOtD,GAAA,YAAAA,EAAM,cAAcA,GAAA,YAAAA,EAAM,QAAS,CAAC,EACzD,OAAOoD,EAAMC,EAAMC,CACrB,EAAG,CAAC,GAAK,EAGL,CAAE,MAAOP,GAAW,OAAM1D,GAAAC,GAAAC,EAAAC,IAAA,YAAAD,EAAU,KAAK,UAAf,YAAAD,EAAwB,OAAOO,KAA/B,YAAAR,EAAyC,GAAG,KAAMJ,IAClF,GAAI8D,EAAQ,MAAM,IAAI,MAAM,0BAA0BA,EAAO,OAAO,EAAE,EAGtE,MAAMQ,EAAkB,CACtB,OAAQtE,EACR,YAAYY,GAAA,YAAAA,EAAS,aAAc,KACnC,aAAcsD,EACd,cAAe/C,GAAgB,mBAC/B,eAAgBC,GAAiB,KACjC,eAAgBG,GAAiB,KACjC,mBAAoB,SACxB,EAEQ,CAAE,MAAOgD,CAAM,EAAK,OAAMjD,GAAAnB,EAAAI,IAAA,YAAAJ,EAC5B,KAAK,kBADuB,YAAAmB,EAE5B,OAAOgD,EAAiB,CAAE,WAAY,QAAQ,IAElD,GAAIC,EAAQ,MAAM,IAAI,MAAM,iCAAiCA,EAAO,OAAO,EAAE,EAI7E,KAAM,CAAE,MAAOC,CAAM,EAAK,OAAM9C,GAAAF,GAAAH,EAAAd,IAAA,YAAAc,EAAU,KAAK,eAAf,YAAAG,EAA6B,WAA7B,YAAAE,EAAuC,GAAG,SAAU1B,IACpF,GAAIwE,EAAQ,MAAM,IAAI,MAAM,gCAAgCA,EAAO,OAAO,EAAE,EAG5E,IAAK3D,GAAuB,IAAI,OAAS,EAAG,CAC1C,MAAMkD,EAAOpC,EAAc3B,EAAIa,CAAmB,EAClD,IAAIkD,GAAA,YAAAA,EAAM,QAAS,EAAG,CACpB,KAAM,CAAE,MAAOU,CAAM,EAAK,OAAMpC,GAAAZ,EAAAlB,IAAA,YAAAkB,EAAU,KAAK,eAAf,YAAAY,EAA6B,OAAO0B,IACpE,GAAIU,EAAQ,MAAM,IAAI,MAAM,gCAAgCA,EAAO,OAAO,EAAE,CAC9E,CACF,CAGA,OAAI7D,GAAA,MAAAA,EAAS,uBAAyBM,GACpC,MAAMa,EAAuB/B,EAAIkB,CAAU,EAItC,MAAMwC,EAAQ1D,CAAE,CACzB,CAGO,eAAe0E,EAAW1E,EAAI,OACnC,KAAM,CAAE,MAAAmC,CAAK,EAAK,OAAM7B,EAAAC,IAAA,YAAAD,EAAU,IAAI,qBAAsB,CAAE,SAAUN,KACxE,GAAImC,EAAO,MAAM,IAAI,MAAM,0BAA0BA,EAAM,OAAO,EAAE,EACpE,MAAO,EACT,CAGO,eAAewC,EAAiB3E,EAAI4E,EAAY,eACrD,KAAM,CAAE,KAAAC,EAAM,MAAA1C,CAAK,EAAK,OAAMb,GAAAnB,GAAAC,GAAAC,GAAAC,EAAAC,IAAA,YAAAD,EAC1B,KAAK,UADqB,YAAAD,EAE1B,OAAO,CAAE,WAAAuE,MAFiB,YAAAxE,EAG1B,GAAG,KAAMJ,KAHiB,YAAAG,EAI1B,OAAO,oBAJmB,YAAAmB,EAK1B,UAEJ,GAAIa,EAAO,MAAM,IAAI,MAAM,4BAA4BA,EAAM,OAAO,EAAE,EACtE,OAAO0C,CACT,CAGA,SAASC,EAAgBC,EAAQ,OAC/B,OAAKA,EAEE,CACL,GAAIA,GAAA,YAAAA,EAAQ,GACZ,YAAYA,GAAA,YAAAA,EAAQ,aAAc,GAClC,OAAOA,GAAA,YAAAA,EAAQ,QAAS,GACxB,aAAaA,GAAA,YAAAA,EAAQ,cAAe,GACpC,UAAWA,GAAA,YAAAA,EAAQ,UACnB,WAAYA,GAAA,YAAAA,EAAQ,WACpB,YAAYA,GAAA,YAAAA,EAAQ,aAAc,UAClC,UAAUA,GAAA,YAAAA,EAAQ,WAAY,SAC9B,sBAAsBA,GAAA,YAAAA,EAAQ,uBAAwB,GACtD,oBAAoBA,GAAA,YAAAA,EAAQ,qBAAsB,GAClD,iBAAiBA,GAAA,YAAAA,EAAQ,kBAAmB,GAC5C,gBAAgBA,GAAA,YAAAA,EAAQ,iBAAkB,GAC1C,aAAaA,GAAA,YAAAA,EAAQ,cAAe,GACpC,UAAUA,GAAA,YAAAA,EAAQ,WAAY,GAC9B,sBAAuB,CAAC,EAACA,GAAA,MAAAA,EAAQ,uBACjC,YAAaA,GAAA,YAAAA,EAAQ,YACrB,wBAAyBA,GAAA,YAAAA,EAAQ,wBAEjC,cAAcA,GAAA,YAAAA,EAAQ,gBAAiB,GACvC,eAAeA,GAAA,YAAAA,EAAQ,iBAAkB,GACzC,eAAeA,GAAA,YAAAA,EAAQ,iBAAkB,GAEzC,SAASA,GAAA,YAAAA,EAAQ,UAAW,KAE5B,WAAYzE,GAAAyE,GAAA,YAAAA,EAAQ,YAAa,CAAA,IAArB,YAAAzE,EAA0B,IAAKgD,IAAU,CACnD,WAAYA,GAAA,YAAAA,EAAM,WAClB,YAAYA,GAAA,YAAAA,EAAM,aAAc,EAChC,eAAeA,GAAA,YAAAA,EAAM,gBAAiB,EACtC,eAAeA,GAAA,YAAAA,EAAM,gBAAiB,GACtC,oBAAqB,CAAC,EAACA,GAAA,MAAAA,EAAM,qBAC7B,oBAAoBA,GAAA,YAAAA,EAAM,qBAAsB,GAChD,YAAa,CAAC,EAACA,GAAA,MAAAA,EAAM,YAC3B,GACA,EApCsB,IAqCtB,CAGO,eAAe0B,GAAmBC,EAAoB,aAC3D,GAAI,CAEF,KAAM,CAAE,MAAA9C,CAAK,EAAK,OAAMhC,GAAAC,GAAAE,EAAAC,IAAA,YAAAD,EACpB,KAAK,wBADe,YAAAF,EAEpB,OAAO,CAAE,aAAaC,EAAA,IAAI,OAAJ,YAAAA,EAAY,aAAa,KAF3B,YAAAF,EAGpB,GAAG,KAAM8E,IAEb,GAAI9C,EAAO,MAAMA,EACjB,MAAO,EACT,OAASA,EAAO,CACd,cAAQ,MAAM,qCAAsCA,CAAK,EACnD,IAAI,MAAM,sCAAsCA,GAAA,YAAAA,EAAO,OAAO,EAAE,CACxE,CACF,CAGY,MAAC+C,GAAc,CACzB,YAAA1C,EACA,QAAAkB,EACA,WAAAC,EACA,WAAAM,EACA,WAAAS,EACA,iBAAAC,CACF"}