{"version":3,"file":"claimsService-BSSCnxMN.js","sources":["../../src/services/claimsService.js"],"sourcesContent":["// Note: vehicles may not have org_id; tenant scoping flows via claims.org_id and joins.\r\nimport { supabase } from '@/lib/supabase'\r\n\r\nexport const claimsService = {\r\n  // Get all claims with vehicle and product details\r\n  async getAllClaims(orgId = null) {\r\n    try {\r\n      let q = supabase\r\n        ?.from('claims')\r\n        ?.select(\r\n          `\r\n          *,\r\n          vehicle:vehicles(make, model, year, vin, owner_name),\r\n          product:products(name, brand, category),\r\n          submitted_by_profile:user_profiles!submitted_by(full_name, email),\r\n          assigned_to_profile:user_profiles!assigned_to(full_name, email)\r\n        `\r\n        )\r\n        ?.order('created_at', { ascending: false })\r\n      if (orgId) q = q?.eq('org_id', orgId)\r\n      const { data } = await q.throwOnError()\r\n      return data || []\r\n    } catch (error) {\r\n      throw new Error(`Failed to fetch claims: ${error.message}`)\r\n    }\r\n  },\r\n\r\n  // Get claims for customer portal (filtered by customer info)\r\n  async getCustomerClaims(customerEmail, orgId = null) {\r\n    try {\r\n      let q = supabase\r\n        ?.from('claims')\r\n        ?.select(\r\n          `\r\n          *,\r\n          vehicle:vehicles(make, model, year, owner_name),\r\n          product:products(name, brand, category),\r\n          attachments:claim_attachments(*)\r\n        `\r\n        )\r\n        ?.eq('customer_email', customerEmail)\r\n        ?.order('created_at', { ascending: false })\r\n      if (orgId) q = q?.eq('org_id', orgId)\r\n      const { data } = await q.throwOnError()\r\n      return data || []\r\n    } catch (error) {\r\n      throw new Error(`Failed to fetch customer claims: ${error.message}`)\r\n    }\r\n  },\r\n\r\n  // Get customer's vehicles for dropdown\r\n  async getCustomerVehicles(customerEmail, orgId = null) {\r\n    try {\r\n      let q = supabase\r\n        ?.from('vehicles')\r\n        ?.select('id, make, model, year, vin')\r\n        ?.eq('owner_email', customerEmail)\r\n        ?.eq('vehicle_status', 'active')\r\n      const { data } = await q.throwOnError()\r\n      return data || []\r\n    } catch (error) {\r\n      throw new Error(`Failed to fetch customer vehicles: ${error.message}`)\r\n    }\r\n  },\r\n\r\n  // Get products for claims\r\n  async getProducts(orgId = null) {\r\n    try {\r\n      let q = supabase\r\n        ?.from('products')\r\n        ?.select('id, name, brand, category, unit_price')\r\n        ?.order('name')\r\n      if (orgId) q = q?.eq('org_id', orgId)\r\n      const { data } = await q.throwOnError()\r\n      return data || []\r\n    } catch (error) {\r\n      throw new Error(`Failed to fetch products: ${error.message}`)\r\n    }\r\n  },\r\n\r\n  // Create new claim\r\n  async createClaim(claimData) {\r\n    try {\r\n      // Generate claim number\r\n      const { data: claimNumber, error: numberError } = await supabase?.rpc('generate_claim_number')\r\n\r\n      if (numberError) throw numberError\r\n\r\n      const newClaim = {\r\n        ...claimData,\r\n        claim_number: claimNumber,\r\n      }\r\n\r\n      const { data, error } = await supabase?.from('claims')?.insert([newClaim])?.select(`\r\n          *,\r\n          vehicle:vehicles(make, model, year),\r\n          product:products(name, brand)\r\n        `)\r\n\r\n      if (error) throw error\r\n      return data?.[0]\r\n    } catch (error) {\r\n      throw new Error(`Failed to create claim: ${error.message}`)\r\n    }\r\n  },\r\n\r\n  // Update claim status and details\r\n  async updateClaim(claimId, updates) {\r\n    try {\r\n      const { data, error } = await supabase?.from('claims')?.update(updates)?.eq('id', claimId)\r\n        ?.select(`\r\n          *,\r\n          vehicle:vehicles(make, model, year),\r\n          product:products(name, brand),\r\n          assigned_to_profile:user_profiles!assigned_to(full_name, email)\r\n        `)\r\n\r\n      if (error) throw error\r\n      return data?.[0]\r\n    } catch (error) {\r\n      throw new Error(`Failed to update claim: ${error.message}`)\r\n    }\r\n  },\r\n\r\n  // Upload claim photo\r\n  async uploadClaimPhoto(claimId, file, description) {\r\n    try {\r\n      const fileName = `${Date.now()}-${file?.name}`\r\n      const filePath = `claim-${claimId}/${fileName}`\r\n\r\n      // Upload to storage\r\n      const { data: uploadData, error: uploadError } = await supabase?.storage\r\n        ?.from('claim-photos')\r\n        ?.upload(filePath, file)\r\n\r\n      if (uploadError) throw uploadError\r\n\r\n      // Save attachment record\r\n      const { data, error } = await supabase\r\n        ?.from('claim_attachments')\r\n        ?.insert([\r\n          {\r\n            claim_id: claimId,\r\n            file_name: file?.name,\r\n            file_path: filePath,\r\n            file_type: file?.type,\r\n            file_size: file?.size,\r\n            description: description,\r\n          },\r\n        ])\r\n        ?.select()\r\n\r\n      if (error) throw error\r\n      return data?.[0]\r\n    } catch (error) {\r\n      throw new Error(`Failed to upload photo: ${error.message}`)\r\n    }\r\n  },\r\n\r\n  // Get signed URL for claim photo with enhanced error handling\r\n  async getClaimPhotoUrl(filePath) {\r\n    try {\r\n      // Validate file path\r\n      if (!filePath) {\r\n        console.warn('No file path provided for signed URL')\r\n        return null\r\n      }\r\n\r\n      // Safely parse folder and filename\r\n      const pathParts = filePath?.split('/')\r\n      if (!pathParts || pathParts?.length < 2) {\r\n        console.warn(`Invalid file path format: ${filePath}`)\r\n        return null\r\n      }\r\n\r\n      const folderName = pathParts?.[0]\r\n      const fileName = pathParts?.slice(-1)?.[0]\r\n\r\n      // Check if file exists first with enhanced error handling\r\n      const { data: fileExists, error: existsError } = await supabase?.storage\r\n        ?.from('claim-photos')\r\n        ?.list(folderName, {\r\n          search: fileName,\r\n        })\r\n\r\n      // Handle list operation errors gracefully\r\n      if (existsError) {\r\n        console.warn('Error checking file existence:', {\r\n          error: existsError,\r\n          filePath,\r\n          folderName,\r\n          fileName,\r\n        })\r\n        return null // Return null instead of throwing\r\n      }\r\n\r\n      // Check if file was found in the list\r\n      if (!fileExists || !Array.isArray(fileExists) || fileExists?.length === 0) {\r\n        console.info(`File not found in storage: ${filePath}`)\r\n        return null\r\n      }\r\n\r\n      // Verify the exact file exists in the results\r\n      const fileFound = fileExists?.find((file) => file?.name === fileName)\r\n      if (!fileFound) {\r\n        console.info(`Specific file not found in folder: ${fileName} in ${folderName}`)\r\n        return null\r\n      }\r\n\r\n      // Create signed URL with error handling\r\n      const { data, error } = await supabase?.storage\r\n        ?.from('claim-photos')\r\n        ?.createSignedUrl(filePath, 7200) // 2 hour expiry for images\r\n\r\n      if (error) {\r\n        console.warn('Error creating signed URL:', {\r\n          error,\r\n          filePath,\r\n          errorMessage: error?.message,\r\n          statusCode: error?.statusCode,\r\n        })\r\n        return null\r\n      }\r\n\r\n      if (!data?.signedUrl) {\r\n        console.warn('No signed URL returned from Supabase:', { filePath, data })\r\n        return null\r\n      }\r\n\r\n      return data?.signedUrl\r\n    } catch (error) {\r\n      console.warn('Unexpected error in getClaimPhotoUrl:', {\r\n        error: error?.message || error,\r\n        filePath,\r\n        stack: error?.stack,\r\n      })\r\n      return null\r\n    }\r\n  },\r\n\r\n  // Get claim attachments with enhanced error isolation\r\n  async getClaimAttachments(claimId) {\r\n    try {\r\n      if (!claimId) {\r\n        console.warn('No claim ID provided for attachments')\r\n        return []\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        ?.from('claim_attachments')\r\n        ?.select('*')\r\n        ?.eq('claim_id', claimId)\r\n        ?.order('created_at', { ascending: false })\r\n\r\n      if (error) {\r\n        console.error('Database error fetching claim attachments:', {\r\n          error: error?.message,\r\n          claimId,\r\n        })\r\n        throw error\r\n      }\r\n\r\n      // Return empty array if no attachments\r\n      if (!data || data?.length === 0) {\r\n        console.info(`No attachments found for claim ${claimId}`)\r\n        return []\r\n      }\r\n\r\n      console.info(`Processing ${data?.length} attachments for claim ${claimId}`)\r\n\r\n      // Process attachments with better error isolation\r\n      const attachmentPromises = data?.map(async (attachment, index) => {\r\n        try {\r\n          // Validate attachment data\r\n          if (!attachment?.file_path) {\r\n            console.warn(`Attachment ${attachment?.id} has no file path`)\r\n            return {\r\n              ...attachment,\r\n              signedUrl: null,\r\n              hasValidUrl: false,\r\n              error: 'No file path',\r\n            }\r\n          }\r\n\r\n          console.info(\r\n            `Processing attachment ${index + 1}/${data?.length}: ${attachment?.file_name}`\r\n          )\r\n\r\n          const signedUrl = await this.getClaimPhotoUrl(attachment?.file_path)\r\n\r\n          return {\r\n            ...attachment,\r\n            signedUrl: signedUrl,\r\n            hasValidUrl: !!signedUrl,\r\n            error: signedUrl ? null : 'Failed to generate signed URL',\r\n          }\r\n        } catch (attachmentError) {\r\n          console.warn(`Error processing attachment ${attachment?.id}:`, {\r\n            error: attachmentError?.message,\r\n            attachmentId: attachment?.id,\r\n            fileName: attachment?.file_name,\r\n          })\r\n\r\n          return {\r\n            ...attachment,\r\n            signedUrl: null,\r\n            hasValidUrl: false,\r\n            error: attachmentError?.message || 'Processing error',\r\n          }\r\n        }\r\n      })\r\n\r\n      // Use Promise.allSettled to handle all attachments regardless of individual failures\r\n      const settledResults = await Promise.allSettled(attachmentPromises)\r\n\r\n      const processedAttachments = settledResults?.map((result, index) => {\r\n        if (result?.status === 'fulfilled') {\r\n          return result?.value\r\n        } else {\r\n          console.error(`Failed to process attachment ${index}:`, result?.reason)\r\n          return {\r\n            id: `failed_${index}`,\r\n            signedUrl: null,\r\n            hasValidUrl: false,\r\n            error: result?.reason?.message || 'Promise rejected',\r\n          }\r\n        }\r\n      })\r\n\r\n      // Filter out any completely invalid results\r\n      const validAttachments = processedAttachments?.filter(\r\n        (attachment) =>\r\n          (attachment && attachment?.id && typeof attachment?.id !== 'string') ||\r\n          !attachment?.id?.startsWith('failed_')\r\n      )\r\n\r\n      const successCount = validAttachments?.filter((a) => a?.hasValidUrl)?.length\r\n      const totalCount = validAttachments?.length\r\n\r\n      console.info(\r\n        `Successfully processed ${successCount}/${totalCount} attachments for claim ${claimId}`\r\n      )\r\n\r\n      return validAttachments\r\n    } catch (error) {\r\n      console.error('Critical error in getClaimAttachments:', {\r\n        error: error?.message,\r\n        claimId,\r\n        stack: error?.stack,\r\n      })\r\n\r\n      // Instead of throwing, return empty array to prevent UI breaks\r\n      return []\r\n    }\r\n  },\r\n\r\n  // Add method to clean up orphaned attachment records\r\n  async validateClaimAttachments(claimId) {\r\n    try {\r\n      const attachments = await supabase\r\n        ?.from('claim_attachments')\r\n        ?.select('*')\r\n        ?.eq('claim_id', claimId)\r\n\r\n      if (!attachments?.data) return { valid: 0, invalid: 0 }\r\n\r\n      let validCount = 0\r\n      let invalidCount = 0\r\n\r\n      for (const attachment of attachments?.data) {\r\n        const signedUrl = await this.getClaimPhotoUrl(attachment?.file_path)\r\n        if (signedUrl) {\r\n          validCount++\r\n        } else {\r\n          invalidCount++\r\n          console.warn(`Invalid attachment found: ${attachment?.id} - ${attachment?.file_name}`)\r\n        }\r\n      }\r\n\r\n      return { valid: validCount, invalid: invalidCount, total: attachments?.data?.length }\r\n    } catch (error) {\r\n      console.error('Error validating claim attachments:', error)\r\n      return { valid: 0, invalid: 0, total: 0 }\r\n    }\r\n  },\r\n\r\n  // List files in storage bucket for debugging\r\n  async listClaimFiles(claimId) {\r\n    try {\r\n      const folderPath = `claim-${claimId}`\r\n      const { data, error } = await supabase?.storage?.from('claim-photos')?.list(folderPath, {\r\n        limit: 100,\r\n        sortBy: { column: 'created_at', order: 'desc' },\r\n      })\r\n\r\n      if (error) throw error\r\n      return data || []\r\n    } catch (error) {\r\n      console.error('Error listing claim files:', error)\r\n      throw new Error(`Failed to list claim files: ${error.message}`)\r\n    }\r\n  },\r\n\r\n  // Download claim photo directly\r\n  async downloadClaimPhoto(filePath) {\r\n    try {\r\n      const { data, error } = await supabase?.storage?.from('claim-photos')?.download(filePath)\r\n\r\n      if (error) throw error\r\n\r\n      // Create download link\r\n      const url = URL.createObjectURL(data)\r\n      const link = document.createElement('a')\r\n      link.href = url\r\n      link.download = filePath?.split('/')?.pop()\r\n      document.body?.appendChild(link)\r\n      link?.click()\r\n      document.body?.removeChild(link)\r\n      URL.revokeObjectURL(url)\r\n\r\n      return true\r\n    } catch (error) {\r\n      console.error('Error downloading claim photo:', error)\r\n      throw new Error(`Failed to download photo: ${error.message}`)\r\n    }\r\n  },\r\n\r\n  // Get claims statistics for management dashboard\r\n  async getClaimsStats(orgId = null) {\r\n    try {\r\n      let q = supabase?.from('claims')?.select('status, priority, claim_amount, created_at')\r\n      if (orgId) q = q?.eq('org_id', orgId)\r\n      const { data, error } = await q\r\n\r\n      if (error) throw error\r\n\r\n      const stats = {\r\n        total: data?.length || 0,\r\n        byStatus: {},\r\n        byPriority: {},\r\n        totalAmount: 0,\r\n        avgAmount: 0,\r\n        recentClaims: 0,\r\n      }\r\n\r\n      const thirtyDaysAgo = new Date()\r\n      thirtyDaysAgo?.setDate(thirtyDaysAgo?.getDate() - 30)\r\n\r\n      data?.forEach((claim) => {\r\n        // Count by status\r\n        stats.byStatus[claim.status] = (stats?.byStatus?.[claim?.status] || 0) + 1\r\n\r\n        // Count by priority\r\n        stats.byPriority[claim.priority] = (stats?.byPriority?.[claim?.priority] || 0) + 1\r\n\r\n        // Sum amounts\r\n        if (claim?.claim_amount) {\r\n          stats.totalAmount += parseFloat(claim?.claim_amount)\r\n        }\r\n\r\n        // Count recent claims\r\n        if (new Date(claim.created_at) > thirtyDaysAgo) {\r\n          stats.recentClaims++\r\n        }\r\n      })\r\n\r\n      stats.avgAmount = stats?.total > 0 ? stats?.totalAmount / stats?.total : 0\r\n\r\n      return stats\r\n    } catch (error) {\r\n      throw new Error(`Failed to fetch claims statistics: ${error.message}`)\r\n    }\r\n  },\r\n\r\n  // Get staff for assignment dropdown\r\n  async getStaff(orgId = null) {\r\n    try {\r\n      let q = supabase\r\n        ?.from('user_profiles')\r\n        ?.select('id, full_name, email, role')\r\n        ?.in('role', ['admin', 'manager', 'staff'])\r\n        ?.eq('is_active', true)\r\n        ?.order('full_name')\r\n      if (orgId) q = q?.eq('org_id', orgId)\r\n      const { data, error } = await q\r\n\r\n      if (error) throw error\r\n      return data || []\r\n    } catch (error) {\r\n      throw new Error(`Failed to fetch staff: ${error.message}`)\r\n    }\r\n  },\r\n}\r\n"],"names":["claimsService","orgId","q","_c","_b","_a","supabase","data","error","customerEmail","_d","claimData","claimNumber","numberError","newClaim","claimId","updates","file","description","fileName","filePath","uploadData","uploadError","_f","_e","pathParts","folderName","fileExists","existsError","_g","attachmentPromises","attachment","index","signedUrl","attachmentError","settledResults","processedAttachments","result","validAttachments","successCount","a","totalCount","attachments","validCount","invalidCount","folderPath","url","link","stats","thirtyDaysAgo","claim"],"mappings":"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"}