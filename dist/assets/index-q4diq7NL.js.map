{"version":3,"file":"index-q4diq7NL.js","sources":["../../src/services/calendarService.js","../../src/services/vendorService.js","../../src/pages/calendar-flow-management-center/components/QuickFilters.jsx","../../src/lib/time.js","../../src/pages/calendar-flow-management-center/components/UnassignedQueue.jsx","../../src/pages/calendar-flow-management-center/components/JobDrawer.jsx","../../src/pages/calendar-flow-management-center/components/RoundUpModal.jsx","../../src/pages/calendar-flow-management-center/index.jsx"],"sourcesContent":["import { supabase } from '@/lib/supabase'\r\nimport { safeSelect } from '@/lib/supabase/safeSelect'\r\n\r\n/**\r\n * Calendar Service - Handles calendar scheduling operations\r\n */\r\nexport const calendarService = {\r\n  /**\r\n   * Get jobs within a date range for calendar display\r\n   */\r\n  async getJobsByDateRange(startDate, endDate, filters = {}) {\r\n    try {\r\n      const { data, error } = await supabase?.rpc('get_jobs_by_date_range', {\r\n        start_date: startDate?.toISOString(),\r\n        end_date: endDate?.toISOString(),\r\n        vendor_filter: filters?.vendorId || null,\r\n        status_filter: filters?.status || null,\r\n      })\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n\r\n      return { data: data || [], error: null }\r\n    } catch (error) {\r\n      console.error('[calendar] getJobsByDateRange failed:', error)\r\n      return { data: [], error }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Check for vendor scheduling conflicts\r\n   */\r\n  async checkSchedulingConflict(vendorId, startTime, endTime, excludeJobId = null) {\r\n    try {\r\n      const { data, error } = await supabase?.rpc('check_vendor_schedule_conflict', {\r\n        vendor_uuid: vendorId,\r\n        start_time: startTime?.toISOString(),\r\n        end_time: endTime?.toISOString(),\r\n        exclude_job_id: excludeJobId,\r\n      })\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n\r\n      return { hasConflict: data || false, error: null }\r\n    } catch (error) {\r\n      console.error('[calendar] checkSchedulingConflict failed:', error)\r\n      return { hasConflict: false, error }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Update job scheduling information\r\n   */\r\n  async updateJobSchedule(jobId, scheduleData, orgId = null) {\r\n    try {\r\n      const updateData = {\r\n        scheduled_start_time: scheduleData?.startTime?.toISOString(),\r\n        scheduled_end_time: scheduleData?.endTime?.toISOString(),\r\n        vendor_id: scheduleData?.vendorId,\r\n        location: scheduleData?.location,\r\n        color_code: scheduleData?.colorCode,\r\n        calendar_notes: scheduleData?.notes,\r\n        // Ensure scheduled jobs surface in Active Appointments views\r\n        // Default to 'scheduled' when we have a start time unless an explicit status was provided\r\n        job_status: scheduleData?.status ?? (scheduleData?.startTime ? 'scheduled' : undefined),\r\n        updated_at: new Date()?.toISOString(),\r\n      }\r\n\r\n      // Remove undefined values\r\n      Object.keys(updateData)?.forEach((key) => {\r\n        if (updateData?.[key] === undefined) {\r\n          delete updateData?.[key]\r\n        }\r\n      })\r\n\r\n      let q = supabase\r\n        ?.from('jobs')\r\n        ?.update(updateData)\r\n        ?.eq('id', jobId)\r\n        ?.select(\r\n          `\r\n          *,\r\n          vendor:vendors(id, name, specialty),\r\n          vehicle:vehicles(id, make, model, year, owner_name, stock_number)\r\n        `\r\n        )\r\n        ?.single()\r\n      if (orgId) q = q?.eq('org_id', orgId)\r\n      const data = await safeSelect(q, 'calendar:updateJobSchedule')\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('[calendar] updateJobSchedule failed:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Create a new scheduled job\r\n   */\r\n  async createScheduledJob(jobData, orgId = null) {\r\n    try {\r\n      // Generate job number\r\n      const { data: jobNumber, error: jobNumberError } = await supabase?.rpc('generate_job_number')\r\n\r\n      if (jobNumberError) {\r\n        throw jobNumberError\r\n      }\r\n\r\n      const newJobData = {\r\n        job_number: jobNumber,\r\n        title: jobData?.title,\r\n        description: jobData?.description || '',\r\n        vehicle_id: jobData?.vehicleId,\r\n        vendor_id: jobData?.vendorId,\r\n        scheduled_start_time: jobData?.startTime?.toISOString(),\r\n        scheduled_end_time: jobData?.endTime?.toISOString(),\r\n        estimated_hours: jobData?.estimatedHours || 2,\r\n        location: jobData?.location || '',\r\n        priority: jobData?.priority || 'medium',\r\n        job_status: 'scheduled',\r\n        color_code: jobData?.colorCode || '#3b82f6',\r\n        calendar_notes: jobData?.notes || '',\r\n        created_by: jobData?.createdBy,\r\n        org_id: orgId ?? jobData?.org_id ?? null,\r\n      }\r\n\r\n      const { data } = await supabase\r\n        ?.from('jobs')\r\n        ?.insert([newJobData])\r\n        ?.select(\r\n          `\r\n          *,\r\n          vendor:vendors(id, name, specialty),\r\n          vehicle:vehicles(id, make, model, year, owner_name, stock_number)\r\n        `\r\n        )\r\n        ?.single()\r\n        ?.throwOnError()\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      console.error('[calendar] createScheduledJob failed:', error)\r\n      return { data: null, error }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get overdue jobs\r\n   */\r\n  async getOverdueJobs() {\r\n    try {\r\n      const { data, error } = await supabase?.rpc('get_overdue_jobs')\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n\r\n      return { data: data || [], error: null }\r\n    } catch (error) {\r\n      console.error('[calendar] getOverdueJobs failed:', error)\r\n      return { data: [], error }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get calendar overview statistics\r\n   */\r\n  async getCalendarStats(dateRange = 'today', orgId = null) {\r\n    try {\r\n      const now = new Date()\r\n      let startDate, endDate\r\n\r\n      switch (dateRange) {\r\n        case 'today':\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate())\r\n          endDate = new Date(startDate)\r\n          endDate?.setDate(endDate?.getDate() + 1)\r\n          break\r\n        case 'week':\r\n          startDate = new Date(now)\r\n          startDate?.setDate(now?.getDate() - now?.getDay()) // Start of week (Sunday)\r\n          startDate?.setHours(0, 0, 0, 0)\r\n          endDate = new Date(startDate)\r\n          endDate?.setDate(endDate?.getDate() + 7)\r\n          break\r\n        case 'month':\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), 1)\r\n          endDate = new Date(now.getFullYear(), now.getMonth() + 1, 1)\r\n          break\r\n        default:\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate())\r\n          endDate = new Date(startDate)\r\n          endDate?.setDate(endDate?.getDate() + 1)\r\n      }\r\n\r\n      // Get jobs count for the period\r\n      let totalQ = supabase\r\n        ?.from('jobs')\r\n        ?.select('*', { count: 'exact', head: true })\r\n        ?.neq('job_status', 'cancelled')\r\n      if (orgId) totalQ = totalQ?.eq('org_id', orgId)\r\n      const { count: totalJobs, error: totalErr } = await totalQ\r\n      if (totalErr) throw totalErr\r\n\r\n      // Get scheduled jobs for the period\r\n      let schedQ = supabase\r\n        ?.from('jobs')\r\n        ?.select('*', { count: 'exact', head: true })\r\n        ?.gte('scheduled_start_time', startDate?.toISOString())\r\n        ?.lt('scheduled_start_time', endDate?.toISOString())\r\n      if (orgId) schedQ = schedQ?.eq('org_id', orgId)\r\n      const { count: scheduledJobs, error: schedErr } = await schedQ\r\n      if (schedErr) throw schedErr\r\n\r\n      // Get overdue jobs\r\n      const { data: overdueJobs } = await this.getOverdueJobs()\r\n\r\n      // Get active vendors\r\n      let vendorsQ = supabase\r\n        ?.from('vendors')\r\n        ?.select('*', { count: 'exact', head: true })\r\n        ?.eq('is_active', true)\r\n      if (orgId) vendorsQ = vendorsQ?.eq('org_id', orgId)\r\n      const { count: activeVendors, error: vErr } = await vendorsQ\r\n      if (vErr) throw vErr\r\n\r\n      return {\r\n        data: {\r\n          totalJobs: totalJobs || 0,\r\n          scheduledJobs: scheduledJobs || 0,\r\n          overdueJobs: overdueJobs?.length || 0,\r\n          activeVendors: activeVendors || 0,\r\n        },\r\n        error: null,\r\n      }\r\n    } catch (error) {\r\n      console.error('[calendar] getCalendarStats failed:', error)\r\n      return {\r\n        data: {\r\n          totalJobs: 0,\r\n          scheduledJobs: 0,\r\n          overdueJobs: 0,\r\n          activeVendors: 0,\r\n        },\r\n        error,\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get vendor availability for a time slot\r\n   */\r\n  async getVendorAvailability(vendorId, startTime, endTime) {\r\n    try {\r\n      const { data } = await this.getJobsByDateRange(startTime, endTime, { vendorId })\r\n      const jobs = data\r\n\r\n      const hasOverlap = Array.isArray(jobs)\r\n        ? jobs.some((job) => {\r\n            if (!job?.scheduled_start_time || !job?.scheduled_end_time) return false\r\n\r\n            const jobStart = new Date(job.scheduled_start_time).getTime()\r\n            const jobEnd = new Date(job.scheduled_end_time).getTime()\r\n            return jobStart < endTime.getTime() && jobEnd > startTime.getTime()\r\n          })\r\n        : false\r\n\r\n      return { available: !hasOverlap, conflictingJobs: hasOverlap ? jobs : [], error: null }\r\n    } catch (error) {\r\n      console.error('[calendar] getVendorAvailability failed:', error)\r\n      return { available: false, conflictingJobs: [], error }\r\n    }\r\n  },\r\n}\r\n\r\nexport default calendarService\r\n","import { supabase } from '@/lib/supabase'\r\nimport { safeSelect } from '@/lib/supabase/safeSelect'\r\nimport { toOptions } from '@/lib/options'\r\n\r\nexport async function listVendorsByOrg(orgId) {\r\n  let q = supabase.from('vendors').select('*').order('name', { ascending: true })\r\n  if (orgId) q = q.or(`org_id.eq.${orgId},org_id.is.null`)\r\n  const rows = await safeSelect(q, 'vendors:listByOrg')\r\n  return toOptions(rows, { labelKey: 'name', valueKey: 'id' })\r\n}\r\n\r\nexport const vendorService = {\r\n  /**\r\n   * Get all active vendors. If orgId provided, filter by org.\r\n   */\r\n  async getAll(orgId = null) {\r\n    try {\r\n      let q = supabase\r\n        .from('vendors')\r\n        .select('*')\r\n        .eq('is_active', true)\r\n        .order('name', { ascending: true })\r\n      if (orgId) q = q.or(`org_id.eq.${orgId},org_id.is.null`)\r\n      const rows = await safeSelect(q, 'vendors:getAll')\r\n      return toOptions(rows, { labelKey: 'name', valueKey: 'id' })\r\n    } catch (e) {\r\n      console.error('vendorService.getAll failed', e)\r\n      return []\r\n    }\r\n  },\r\n\r\n  /** Search vendors; optional org scoping */\r\n  async search(term, orgId = null) {\r\n    try {\r\n      if (!term?.trim()) return this.getAll(orgId)\r\n      let q = supabase\r\n        .from('vendors')\r\n        .select('*')\r\n        .or(`name.ilike.%${term}%,specialty.ilike.%${term}%,contact_person.ilike.%${term}%`)\r\n        .eq('is_active', true)\r\n        .order('name', { ascending: true })\r\n        .limit(50)\r\n      if (orgId) q = q.or(`org_id.eq.${orgId},org_id.is.null`)\r\n      const rows = await safeSelect(q, 'vendors:search')\r\n      return toOptions(rows, { labelKey: 'name', valueKey: 'id' })\r\n    } catch (e) {\r\n      console.error('vendorService.search failed', e)\r\n      return []\r\n    }\r\n  },\r\n\r\n  /** Get a vendor by id (optionally scoped to org) */\r\n  async getById(id, orgId = null) {\r\n    if (!id) return null\r\n    try {\r\n      let q = supabase\r\n        .from('vendors')\r\n        .select(`*, vendor_hours:vendor_hours(*), products:products(count)`)\r\n        .eq('id', id)\r\n        .single()\r\n      if (orgId) q = q.eq('org_id', orgId)\r\n      const res = await q.throwOnError()\r\n      return res.data\r\n    } catch (e) {\r\n      console.error('vendorService.getById failed', e)\r\n      return null\r\n    }\r\n  },\r\n}\r\n\r\nexport default vendorService\r\n","import React from 'react';\r\nimport { \r\n  Calendar, \r\n  Clock, \r\n  AlertTriangle, \r\n  UserX, \r\n  CheckCircle,\r\n  Filter,\r\n  Check\r\n} from 'lucide-react';\r\nimport Icon from '../../../components/AppIcon';\r\n\r\n\r\nconst QuickFilters = ({ filters, onFiltersChange, jobCounts }) => {\r\n  const filterChips = [\r\n    {\r\n      id: 'today',\r\n      label: 'Today',\r\n      icon: Calendar,\r\n      count: jobCounts?.today || 0,\r\n      color: 'bg-blue-50 text-blue-700 border-blue-200',\r\n      activeColor: 'bg-blue-600 text-white border-blue-600'\r\n    },\r\n    {\r\n      id: 'in_progress',\r\n      label: 'In-Progress',\r\n      icon: Clock,\r\n      count: jobCounts?.inProgress || 0,\r\n      color: 'bg-yellow-50 text-yellow-700 border-yellow-200',\r\n      activeColor: 'bg-yellow-600 text-white border-yellow-600'\r\n    },\r\n    {\r\n      id: 'overdue',\r\n      label: 'Overdue',\r\n      icon: AlertTriangle,\r\n      count: jobCounts?.overdue || 0,\r\n      color: 'bg-red-50 text-red-700 border-red-200',\r\n      activeColor: 'bg-red-600 text-white border-red-600'\r\n    },\r\n    {\r\n      id: 'no_show',\r\n      label: 'No-Show',\r\n      icon: UserX,\r\n      count: jobCounts?.noShow || 0,\r\n      color: 'bg-gray-50 text-gray-700 border-gray-200',\r\n      activeColor: 'bg-gray-600 text-white border-gray-600'\r\n    },\r\n    {\r\n      id: 'completed',\r\n      label: 'Completed',\r\n      icon: CheckCircle,\r\n      count: jobCounts?.completed || 0,\r\n      color: 'bg-green-50 text-green-700 border-green-200',\r\n      activeColor: 'bg-green-600 text-white border-green-600'\r\n    }\r\n  ];\r\n\r\n  const isStatusActive = (statusId) => {\r\n    return filters?.statuses?.includes(statusId);\r\n  };\r\n\r\n  const toggleStatus = (statusId) => {\r\n    const currentStatuses = filters?.statuses || [];\r\n    const newStatuses = currentStatuses?.includes(statusId)\r\n      ? currentStatuses?.filter(s => s !== statusId)\r\n      : [...currentStatuses, statusId];\r\n    \r\n    onFiltersChange?.({ ...filters, statuses: newStatuses });\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        {/* Status Filter Chips */}\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"flex items-center text-sm text-gray-600 mr-4\">\r\n            <Filter className=\"h-4 w-4 mr-2\" />\r\n            Quick Filters:\r\n          </div>\r\n          \r\n          {filterChips?.map(chip => {\r\n            const Icon = chip?.icon;\r\n            const isActive = isStatusActive(chip?.id);\r\n            \r\n            return (\r\n              <button\r\n                key={chip?.id}\r\n                onClick={() => toggleStatus(chip?.id)}\r\n                className={`\r\n                  flex items-center px-3 py-2 rounded-lg border text-sm font-medium transition-all duration-200\r\n                  ${isActive ? chip?.activeColor : chip?.color}\r\n                  hover:shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\r\n                `}\r\n              >\r\n                {/* Improved checkbox with better contrast and visibility */}\r\n                <div className={`\r\n                  flex items-center justify-center w-4 h-4 mr-2 rounded border-2 transition-all duration-200\r\n                  ${isActive \r\n                    ? 'bg-white border-white' :'bg-transparent border-gray-400 border-opacity-60'\r\n                  }\r\n                `}>\r\n                  <Check \r\n                    className={`h-3 w-3 transition-all duration-200 ${\r\n                      isActive \r\n                        ? 'text-gray-700 opacity-100' :'text-transparent opacity-0'\r\n                    }`} \r\n                  />\r\n                </div>\r\n                \r\n                <Icon className=\"h-4 w-4 mr-2\" />\r\n                {chip?.label}\r\n                {chip?.count > 0 && (\r\n                  <span className={`\r\n                    ml-2 px-2 py-0.5 rounded-full text-xs font-semibold\r\n                    ${isActive \r\n                      ? 'bg-white bg-opacity-20' :'bg-gray-100 text-gray-800'\r\n                    }\r\n                  `}>\r\n                    {chip?.count}\r\n                  </span>\r\n                )}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* Additional Filters */}\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"text-sm text-gray-600\">\r\n            Show:\r\n          </div>\r\n          \r\n          <label className=\"flex items-center cursor-pointer\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={filters?.showUnassigned || false}\r\n              onChange={(e) => onFiltersChange?.({ \r\n                ...filters, \r\n                showUnassigned: e?.target?.checked \r\n              })}\r\n              className=\"rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 focus:ring-2 h-4 w-4\"\r\n            />\r\n            <span className=\"ml-2 text-sm text-gray-700\">Unassigned Jobs</span>\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuickFilters;","import { fromZonedTime, toZonedTime, format } from 'date-fns-tz';\r\n\r\nconst EST_TIMEZONE = 'America/New_York';\r\n\r\n// Safe date creation utility\r\nconst safeCreateDate = (input) => {\r\n  if (!input) return null;\r\n  \r\n  // Handle various input types\r\n  if (input instanceof Date) {\r\n    return isNaN(input?.getTime()) ? null : input;\r\n  }\r\n  \r\n  if (typeof input === 'string') {\r\n    if (input?.trim() === '') return null;\r\n    try {\r\n      const date = new Date(input);\r\n      return isNaN(date?.getTime()) ? null : date;\r\n    } catch (error) {\r\n      console.warn('Date parsing error:', input, error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  if (typeof input === 'number') {\r\n    try {\r\n      const date = new Date(input);\r\n      return isNaN(date?.getTime()) ? null : date;\r\n    } catch (error) {\r\n      console.warn('Date creation from number error:', input, error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n/**\r\n * Convert input time to UTC timestamp\r\n * @param {Date|string} input - Date object or ISO string\r\n * @returns {string} - UTC ISO string\r\n */\r\nexport const toUTC = (input) => {\r\n  try {\r\n    const date = safeCreateDate(input);\r\n    if (!date) {\r\n      console.warn('toUTC: Invalid input date, returning current time');\r\n      return new Date()?.toISOString();\r\n    }\r\n    \r\n    // If input is already in local time, convert assuming EST\r\n    const estTime = fromZonedTime(date, EST_TIMEZONE);\r\n    return estTime?.toISOString();\r\n  } catch (error) {\r\n    console.error('toUTC conversion error:', error);\r\n    return new Date()?.toISOString();\r\n  }\r\n};\r\n\r\n/**\r\n * Format UTC timestamp as EST label\r\n * @param {string} iso - UTC ISO string\r\n * @param {string} fmt - Date format string (default: 'MMM d, h:mma')\r\n * @returns {string} - Formatted EST time string\r\n */\r\nexport const estLabel = (iso, fmt = 'MMM d, h:mma') => {\r\n  try {\r\n    if (!iso || typeof iso !== 'string' || iso?.trim() === '') {\r\n      return 'Invalid Date';\r\n    }\r\n    \r\n    const date = safeCreateDate(iso);\r\n    if (!date) {\r\n      console.warn('estLabel: Invalid date input:', iso);\r\n      return 'Invalid Date';\r\n    }\r\n    \r\n    const estTime = toZonedTime(date, EST_TIMEZONE);\r\n    if (!estTime || isNaN(estTime?.getTime())) {\r\n      console.warn('estLabel: Invalid timezone conversion:', iso);\r\n      return 'Invalid Date';\r\n    }\r\n    \r\n    return format(estTime, fmt, { timeZone: EST_TIMEZONE });\r\n  } catch (error) {\r\n    console.error('estLabel formatting error:', error, 'for input:', iso);\r\n    return 'Invalid Date';\r\n  }\r\n};\r\n\r\n/**\r\n * Get current EST time\r\n * @returns {Date} - Current time in EST timezone\r\n */\r\nexport const getCurrentEST = () => {\r\n  return toZonedTime(new Date(), EST_TIMEZONE);\r\n};\r\n\r\n/**\r\n * Check if time is within EST business hours (8 AM - 6 PM)\r\n * @param {string} iso - UTC ISO string\r\n * @returns {boolean}\r\n */\r\nexport const isBusinessHours = (iso) => {\r\n  try {\r\n    const estTime = toZonedTime(new Date(iso), EST_TIMEZONE);\r\n    const hour = estTime?.getHours();\r\n    return hour >= 8 && hour < 18; // 8 AM to 6 PM EST\r\n  } catch (error) {\r\n    console.error('isBusinessHours check error:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Convert EST time to UTC for database storage\r\n * @param {Date} estDate - Date in EST\r\n * @returns {string} - UTC ISO string\r\n */\r\nexport const estToUTC = (estDate) => {\r\n  try {\r\n    return fromZonedTime(estDate, EST_TIMEZONE)?.toISOString();\r\n  } catch (error) {\r\n    console.error('estToUTC conversion error:', error);\r\n    return new Date()?.toISOString();\r\n  }\r\n};\r\n\r\n// Time formatting utilities with enhanced safety\r\nexport const formatTime = (timeString) => {\r\n  if (!timeString) return '';\r\n  \r\n  const date = safeCreateDate(timeString);\r\n  if (!date) {\r\n    console.warn('formatTime: Invalid date input:', timeString);\r\n    return 'Invalid Time';\r\n  }\r\n  \r\n  try {\r\n    return date?.toLocaleTimeString('en-US', {\r\n      hour: 'numeric',\r\n      minute: '2-digit',\r\n      hour12: true\r\n    });\r\n  } catch (error) {\r\n    console.error('formatTime error:', error);\r\n    return 'Invalid Time';\r\n  }\r\n};\r\n\r\n// Check if a promise date is overdue with safe date handling\r\nexport const isOverdue = (promiseDate) => {\r\n  if (!promiseDate) return false;\r\n  \r\n  const promise = safeCreateDate(promiseDate);\r\n  if (!promise) return false;\r\n  \r\n  const now = new Date();\r\n  \r\n  try {\r\n    return promise < now;\r\n  } catch (error) {\r\n    console.error('isOverdue comparison error:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get status badge configuration\r\nexport const getStatusBadge = (status) => {\r\n  const statusMap = {\r\n    'pending': {\r\n      label: 'PENDING',\r\n      bg: 'bg-gray-100',\r\n      textColor: 'text-gray-800',\r\n      color: 'bg-gray-500'\r\n    },\r\n    'scheduled': {\r\n      label: 'BOOKED',\r\n      bg: 'bg-blue-100',\r\n      textColor: 'text-blue-800',\r\n      color: 'bg-blue-500'\r\n    },\r\n    'in_progress': {\r\n      label: 'IP',\r\n      bg: 'bg-yellow-100',\r\n      textColor: 'text-yellow-800',\r\n      color: 'bg-yellow-500'\r\n    },\r\n    'quality_check': {\r\n      label: 'W/P',\r\n      bg: 'bg-purple-100',\r\n      textColor: 'text-purple-800',\r\n      color: 'bg-purple-500'\r\n    },\r\n    'completed': {\r\n      label: 'DONE',\r\n      bg: 'bg-green-100',\r\n      textColor: 'text-green-800',\r\n      color: 'bg-green-500'\r\n    },\r\n    'delivered': {\r\n      label: 'DONE',\r\n      bg: 'bg-teal-100',\r\n      textColor: 'text-teal-800',\r\n      color: 'bg-teal-500'\r\n    },\r\n    'cancelled': {\r\n      label: 'CANCELED',\r\n      bg: 'bg-red-100',\r\n      textColor: 'text-red-800',\r\n      color: 'bg-red-500'\r\n    },\r\n    'no_show': {\r\n      label: 'NS',\r\n      bg: 'bg-gray-100',\r\n      textColor: 'text-gray-800',\r\n      color: 'bg-gray-400'\r\n    }\r\n  };\r\n\r\n  return statusMap?.[status] || statusMap?.['pending'];\r\n};\r\n\r\n// Get location-based colors\r\nexport const getLocationColor = (isOnSite) => {\r\n  return isOnSite ? 'bg-green-500' : 'bg-orange-500';\r\n};\r\n\r\n// Enhanced date range calculation with safety\r\nexport const getDateRange = (date, viewMode) => {\r\n  const inputDate = safeCreateDate(date);\r\n  if (!inputDate) {\r\n    console.warn('getDateRange: Invalid input date, using current date');\r\n    const now = new Date();\r\n    return getDateRange(now, viewMode);\r\n  }\r\n\r\n  const start = new Date(inputDate);\r\n  const end = new Date(inputDate);\r\n\r\n  try {\r\n    switch (viewMode) {\r\n      case 'day':\r\n        start?.setHours(0, 0, 0, 0);\r\n        end?.setHours(23, 59, 59, 999);\r\n        break;\r\n      case 'week':\r\n        // Start on Monday\r\n        const dayOfWeek = start?.getDay();\r\n        const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\r\n        start?.setDate(start?.getDate() - daysToMonday);\r\n        start?.setHours(0, 0, 0, 0);\r\n        end?.setDate(start?.getDate() + 5); // Monday to Saturday\r\n        end?.setHours(23, 59, 59, 999);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  } catch (error) {\r\n    console.error('getDateRange calculation error:', error);\r\n    // Return safe defaults\r\n    const safeStart = new Date();\r\n    const safeEnd = new Date();\r\n    safeStart?.setHours(0, 0, 0, 0);\r\n    safeEnd?.setHours(23, 59, 59, 999);\r\n    return { start: safeStart, end: safeEnd };\r\n  }\r\n\r\n  return { start, end };\r\n};\r\n\r\n// Calculate business hours array\r\nexport const getBusinessHours = () => {\r\n  return Array.from({ length: 10 }, (_, i) => 8 + i); // 8AM to 6PM\r\n};\r\n\r\n// Safe time slot conflict checking\r\nexport const hasTimeConflict = (newStart, newEnd, existingJobs) => {\r\n  const newStartTime = safeCreateDate(newStart);\r\n  const newEndTime = safeCreateDate(newEnd);\r\n  \r\n  if (!newStartTime || !newEndTime) {\r\n    console.warn('hasTimeConflict: Invalid time range provided');\r\n    return false;\r\n  }\r\n\r\n  return existingJobs?.some(job => {\r\n    if (!job?.scheduled_start_time || !job?.scheduled_end_time) return false;\r\n    \r\n    const jobStart = safeCreateDate(job?.scheduled_start_time);\r\n    const jobEnd = safeCreateDate(job?.scheduled_end_time);\r\n    \r\n    if (!jobStart || !jobEnd) return false;\r\n    \r\n    try {\r\n      return (\r\n        (newStartTime <= jobStart && newEndTime > jobStart) ||\r\n        (newStartTime < jobEnd && newEndTime >= jobEnd) ||\r\n        (newStartTime >= jobStart && newEndTime <= jobEnd)\r\n      );\r\n    } catch (error) {\r\n      console.error('hasTimeConflict comparison error:', error);\r\n      return false;\r\n    }\r\n  });\r\n};\r\n\r\n// Get day name from date\r\nexport const getDayName = (date) => {\r\n  return date?.toLocaleDateString('en-US', { weekday: 'long' });\r\n};\r\n\r\n// Get short day name from date\r\nexport const getShortDayName = (date) => {\r\n  return date?.toLocaleDateString('en-US', { weekday: 'short' });\r\n};\r\n\r\n// Safe duration calculation\r\nexport const calculateDuration = (startTime, endTime) => {\r\n  if (!startTime || !endTime) return 0;\r\n  \r\n  const start = safeCreateDate(startTime);\r\n  const end = safeCreateDate(endTime);\r\n  \r\n  if (!start || !end) {\r\n    console.warn('calculateDuration: Invalid date inputs');\r\n    return 0;\r\n  }\r\n  \r\n  try {\r\n    const diffMs = end - start;\r\n    return Math.round(diffMs / (1000 * 60 * 60)); // Hours\r\n  } catch (error) {\r\n    console.error('calculateDuration error:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n// Format duration as readable string\r\nexport const formatDuration = (hours) => {\r\n  if (!hours) return '';\r\n  \r\n  if (hours < 1) {\r\n    const minutes = Math.round(hours * 60);\r\n    return `${minutes}min`;\r\n  }\r\n  \r\n  const wholeHours = Math.floor(hours);\r\n  const remainingMinutes = Math.round((hours - wholeHours) * 60);\r\n  \r\n  if (remainingMinutes === 0) {\r\n    return `${wholeHours}h`;\r\n  }\r\n  \r\n  return `${wholeHours}h ${remainingMinutes}min`;\r\n};","import React from 'react';\r\nimport { Car, Clock, Calendar, AlertTriangle, Package } from 'lucide-react';\r\nimport { formatTime, isOverdue, getStatusBadge } from '../../../lib/time';\r\n\r\nconst UnassignedQueue = ({ jobs, onJobClick, onDragStart, loading }) => {\r\n  const renderUnassignedJob = (job) => {\r\n    const overdue = isOverdue(job?.promised_date);\r\n    const statusBadge = getStatusBadge(job?.job_status);\r\n\r\n    return (\r\n      <div\r\n        key={job?.id}\r\n        className=\"bg-white rounded-lg border border-gray-200 p-4 mb-3 cursor-pointer hover:shadow-md transition-all duration-200 hover:border-blue-300\"\r\n        onClick={() => onJobClick?.(job)}\r\n        draggable\r\n        onDragStart={() => onDragStart?.(job)}\r\n      >\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between mb-2\">\r\n          <div className=\"flex items-center\">\r\n            <Car className=\"h-4 w-4 text-gray-600 mr-2\" />\r\n            <span className=\"font-medium text-gray-900\">\r\n              {job?.job_number?.split('-')?.pop()}\r\n            </span>\r\n            {overdue && (\r\n              <AlertTriangle className=\"h-4 w-4 text-red-500 ml-2\" />\r\n            )}\r\n          </div>\r\n          <div className={`\r\n            px-2 py-1 rounded-full text-xs font-medium\r\n            ${statusBadge?.bg || 'bg-gray-100'} \r\n            ${statusBadge?.textColor || 'text-gray-800'}\r\n          `}>\r\n            {statusBadge?.label || job?.job_status?.toUpperCase()}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Job Title */}\r\n        <div className=\"text-sm font-medium text-gray-800 mb-2 flex items-center\">\r\n          <Package className=\"h-3 w-3 text-gray-500 mr-1\" />\r\n          {job?.title}\r\n        </div>\r\n\r\n        {/* Vehicle Info */}\r\n        <div className=\"text-xs text-gray-600 mb-2\">\r\n          {job?.vehicle_info}\r\n        </div>\r\n\r\n        {/* Time and Promise Info */}\r\n        <div className=\"space-y-1\">\r\n          {job?.scheduled_start_time && (\r\n            <div className=\"flex items-center text-xs text-gray-600\">\r\n              <Clock className=\"h-3 w-3 mr-1\" />\r\n              {formatTime(job?.scheduled_start_time)}–{formatTime(job?.scheduled_end_time)}\r\n            </div>\r\n          )}\r\n          \r\n          <div className={`flex items-center text-xs ${overdue ? 'text-red-600' : 'text-gray-600'}`}>\r\n            <Calendar className=\"h-3 w-3 mr-1\" />\r\n            Promise: {new Date(job?.promised_date)?.toLocaleDateString('en-US', { \r\n              weekday: 'short', \r\n              month: 'short', \r\n              day: 'numeric' \r\n            })}\r\n            {overdue && (\r\n              <span className=\"ml-2 px-1.5 py-0.5 bg-red-100 text-red-700 rounded text-xs font-medium\">\r\n                Overdue\r\n              </span>\r\n            )}\r\n          </div>\r\n\r\n          {/* Estimated Hours */}\r\n          {job?.estimated_hours && (\r\n            <div className=\"flex items-center text-xs text-gray-600\">\r\n              <Clock className=\"h-3 w-3 mr-1\" />\r\n              {job?.estimated_hours}h estimated\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Drag Indicator */}\r\n        <div className=\"mt-3 pt-2 border-t border-gray-100\">\r\n          <div className=\"text-xs text-gray-500 text-center\">\r\n            Drag to assign vendor or time slot\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-80 bg-gray-50 border-r border-gray-200 flex flex-col h-full\">\r\n      {/* Header */}\r\n      <div className=\"p-4 bg-white border-b border-gray-200\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <h2 className=\"font-medium text-gray-900\">Unassigned Queue</h2>\r\n          <div className=\"bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded-full font-medium\">\r\n            {jobs?.length || 0}\r\n          </div>\r\n        </div>\r\n        <p className=\"text-xs text-gray-600 mt-1\">\r\n          Drag jobs onto calendar to schedule\r\n        </p>\r\n      </div>\r\n\r\n      {/* Job List */}\r\n      <div className=\"flex-1 overflow-y-auto p-4\">\r\n        {loading ? (\r\n          <div className=\"flex items-center justify-center py-8\">\r\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600\"></div>\r\n          </div>\r\n        ) : jobs?.length > 0 ? (\r\n          <div className=\"space-y-3\">\r\n            {jobs?.map(renderUnassignedJob)}\r\n          </div>\r\n        ) : (\r\n          <div className=\"text-center py-8\">\r\n            <Car className=\"h-8 w-8 text-gray-400 mx-auto mb-3\" />\r\n            <div className=\"text-sm text-gray-600\">No unassigned jobs</div>\r\n            <div className=\"text-xs text-gray-500 mt-1\">\r\n              All jobs are scheduled\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Instructions */}\r\n      <div className=\"p-4 bg-white border-t border-gray-200\">\r\n        <div className=\"text-xs text-gray-600 space-y-1\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\r\n            Drop on calendar for On-Site\r\n          </div>\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-2 h-2 bg-orange-500 rounded-full mr-2\"></div>\r\n            Drop on vendor lane for Off-Site\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnassignedQueue;","import React, { useState } from 'react';\r\nimport { X, Car, Calendar, Clock, User, Phone, MapPin, Building2, Package, MessageSquare, Camera, Copy, Play, CheckCircle, XCircle, RotateCcw, AlertTriangle } from 'lucide-react';\r\nimport { formatTime, isOverdue, getStatusBadge } from '../../../lib/time';\r\nimport Icon from '../../../components/AppIcon';\r\n\r\n\r\nconst JobDrawer = ({ job, isOpen, onClose, onStatusUpdate }) => {\r\n  const [activeTab, setActiveTab] = useState('details');\r\n  const [notes, setNotes] = useState('');\r\n\r\n  if (!isOpen || !job) return null;\r\n\r\n  const statusBadge = getStatusBadge(job?.job_status);\r\n  const overdue = isOverdue(job?.promised_date);\r\n\r\n  const quickActions = [\r\n    {\r\n      id: 'start',\r\n      label: 'Start',\r\n      icon: Play,\r\n      color: 'bg-green-600 hover:bg-green-700 text-white',\r\n      action: () => onStatusUpdate?.(job?.id, 'in_progress')\r\n    },\r\n    {\r\n      id: 'complete',\r\n      label: 'Complete',\r\n      icon: CheckCircle,\r\n      color: 'bg-blue-600 hover:bg-blue-700 text-white',\r\n      action: () => onStatusUpdate?.(job?.id, 'completed')\r\n    },\r\n    {\r\n      id: 'no_show',\r\n      label: 'No-Show',\r\n      icon: XCircle,\r\n      color: 'bg-gray-600 hover:bg-gray-700 text-white',\r\n      action: () => onStatusUpdate?.(job?.id, 'no_show')\r\n    },\r\n    {\r\n      id: 'reschedule',\r\n      label: 'Reschedule',\r\n      icon: RotateCcw,\r\n      color: 'bg-orange-600 hover:bg-orange-700 text-white',\r\n      action: () => {\r\n        // Open reschedule modal\r\n        console.log('Open reschedule modal');\r\n      }\r\n    }\r\n  ];\r\n\r\n  const tabs = [\r\n    { id: 'details', label: 'Details', icon: Package },\r\n    { id: 'customer', label: 'Customer', icon: User },\r\n    { id: 'timeline', label: 'Timeline/Notes', icon: MessageSquare },\r\n    { id: 'photos', label: 'Photos', icon: Camera }\r\n  ];\r\n\r\n  const renderDetailsTab = () => (\r\n    <div className=\"space-y-6\">\r\n      {/* Job Info */}\r\n      <div>\r\n        <h4 className=\"font-medium text-gray-900 mb-3\">Job Information</h4>\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <div>\r\n            <label className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\r\n              Job Number\r\n            </label>\r\n            <div className=\"mt-1 flex items-center\">\r\n              <span className=\"text-sm font-mono\">{job?.job_number}</span>\r\n              <button className=\"ml-2 p-1 hover:bg-gray-100 rounded\">\r\n                <Copy className=\"h-3 w-3 text-gray-400\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\r\n              Priority\r\n            </label>\r\n            <div className=\"mt-1\">\r\n              <span className={`\r\n                inline-flex px-2 py-1 text-xs font-medium rounded-full\r\n                ${job?.priority === 'high' ? 'bg-red-100 text-red-800' :\r\n                  job?.priority === 'medium'? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'\r\n                }\r\n              `}>\r\n                {job?.priority?.toUpperCase()}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Service Details */}\r\n      <div>\r\n        <h4 className=\"font-medium text-gray-900 mb-3\">Service Details</h4>\r\n        <div className=\"bg-gray-50 rounded-lg p-4 space-y-3\">\r\n          <div>\r\n            <label className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\r\n              Service Type\r\n            </label>\r\n            <div className=\"mt-1 text-sm text-gray-900\">{job?.title}</div>\r\n          </div>\r\n          {job?.description && (\r\n            <div>\r\n              <label className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\r\n                Description\r\n              </label>\r\n              <div className=\"mt-1 text-sm text-gray-900\">{job?.description}</div>\r\n            </div>\r\n          )}\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <label className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\r\n                Estimated Hours\r\n              </label>\r\n              <div className=\"mt-1 text-sm text-gray-900\">{job?.estimated_hours || 'N/A'}</div>\r\n            </div>\r\n            <div>\r\n              <label className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\r\n                Estimated Cost\r\n              </label>\r\n              <div className=\"mt-1 text-sm text-gray-900\">\r\n                ${job?.estimated_cost ? Number(job?.estimated_cost)?.toFixed(2) : 'N/A'}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Location & Scheduling */}\r\n      <div>\r\n        <h4 className=\"font-medium text-gray-900 mb-3\">Location & Scheduling</h4>\r\n        <div className=\"bg-gray-50 rounded-lg p-4 space-y-3\">\r\n          <div className=\"flex items-center\">\r\n            {job?.vendor_id ? (\r\n              <>\r\n                <Building2 className=\"h-4 w-4 text-orange-500 mr-2\" />\r\n                <span className=\"text-sm\">Off-Site @ {job?.vendor_name}</span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <MapPin className=\"h-4 w-4 text-green-500 mr-2\" />\r\n                <span className=\"text-sm\">On-Site</span>\r\n              </>\r\n            )}\r\n          </div>\r\n          \r\n          {job?.scheduled_start_time && (\r\n            <div className=\"flex items-center\">\r\n              <Clock className=\"h-4 w-4 text-gray-400 mr-2\" />\r\n              <span className=\"text-sm\">\r\n                {formatTime(job?.scheduled_start_time)} - {formatTime(job?.scheduled_end_time)}\r\n              </span>\r\n            </div>\r\n          )}\r\n          \r\n          <div className={`flex items-center ${overdue ? 'text-red-600' : ''}`}>\r\n            <Calendar className=\"h-4 w-4 mr-2\" />\r\n            <span className=\"text-sm\">\r\n              Promise Date: {new Date(job?.promised_date)?.toLocaleDateString()}\r\n            </span>\r\n            {overdue && (\r\n              <AlertTriangle className=\"h-4 w-4 ml-2 text-red-500\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderCustomerTab = () => (\r\n    <div className=\"space-y-4\">\r\n      <div>\r\n        <h4 className=\"font-medium text-gray-900 mb-3\">Vehicle Information</h4>\r\n        <div className=\"bg-gray-50 rounded-lg p-4\">\r\n          <div className=\"flex items-center mb-2\">\r\n            <Car className=\"h-4 w-4 text-gray-400 mr-2\" />\r\n            <span className=\"text-sm font-medium\">{job?.vehicle_info}</span>\r\n          </div>\r\n          {/* Add more vehicle details from the vehicles table if needed */}\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <h4 className=\"font-medium text-gray-900 mb-3\">Customer Contact</h4>\r\n        <div className=\"bg-gray-50 rounded-lg p-4 space-y-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center\">\r\n              <User className=\"h-4 w-4 text-gray-400 mr-2\" />\r\n              <span className=\"text-sm\">Customer Name</span>\r\n            </div>\r\n            <span className=\"text-sm text-gray-600\">Available in vehicle record</span>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center\">\r\n              <Phone className=\"h-4 w-4 text-gray-400 mr-2\" />\r\n              <span className=\"text-sm\">Phone</span>\r\n            </div>\r\n            <span className=\"text-sm text-gray-600\">Available in vehicle record</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderTimelineTab = () => (\r\n    <div className=\"space-y-4\">\r\n      <div>\r\n        <h4 className=\"font-medium text-gray-900 mb-3\">Recent Updates</h4>\r\n        <div className=\"space-y-3\">\r\n          <div className=\"border-l-4 border-blue-400 pl-4 py-2\">\r\n            <div className=\"text-sm font-medium text-gray-900\">Job Created</div>\r\n            <div className=\"text-xs text-gray-500\">\r\n              {new Date(job?.created_at)?.toLocaleString()}\r\n            </div>\r\n          </div>\r\n          \r\n          {job?.updated_at && job?.updated_at !== job?.created_at && (\r\n            <div className=\"border-l-4 border-yellow-400 pl-4 py-2\">\r\n              <div className=\"text-sm font-medium text-gray-900\">Last Updated</div>\r\n              <div className=\"text-xs text-gray-500\">\r\n                {new Date(job?.updated_at)?.toLocaleString()}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <h4 className=\"font-medium text-gray-900 mb-3\">Add Note</h4>\r\n        <textarea\r\n          value={notes}\r\n          onChange={(e) => setNotes(e?.target?.value)}\r\n          placeholder=\"Add a note about this job...\"\r\n          className=\"w-full h-24 border border-gray-300 rounded-lg p-3 text-sm\"\r\n        />\r\n        <button className=\"mt-2 px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700\">\r\n          Add Note\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderPhotosTab = () => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        <Camera className=\"h-8 w-8 mx-auto mb-3 text-gray-400\" />\r\n        <div className=\"text-sm\">No photos uploaded yet</div>\r\n        <button className=\"mt-3 px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700\">\r\n          Upload Photos\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 overflow-hidden\">\r\n      <div className=\"absolute inset-0 bg-black bg-opacity-50\" onClick={onClose}></div>\r\n      \r\n      <div className=\"absolute right-0 top-0 h-full w-full max-w-2xl bg-white shadow-xl\">\r\n        <div className=\"flex flex-col h-full\">\r\n          {/* Header */}\r\n          <div className=\"px-6 py-4 border-b border-gray-200 bg-white\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center\">\r\n                <div className={`w-3 h-3 rounded-full mr-3 ${\r\n                  job?.vendor_id ? 'bg-orange-500' : 'bg-green-500'\r\n                }`}></div>\r\n                <div>\r\n                  <h2 className=\"text-xl font-semibold text-gray-900\">\r\n                    {job?.job_number}\r\n                  </h2>\r\n                  <div className=\"text-sm text-gray-600 flex items-center mt-1\">\r\n                    {job?.vehicle_info}\r\n                    <span className={`\r\n                      ml-3 px-2 py-1 rounded-full text-xs font-medium\r\n                      ${statusBadge?.bg || 'bg-gray-100'} \r\n                      ${statusBadge?.textColor || 'text-gray-800'}\r\n                    `}>\r\n                      {statusBadge?.label || job?.job_status?.toUpperCase()}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <button\r\n                onClick={onClose}\r\n                className=\"p-2 hover:bg-gray-100 rounded-full\"\r\n              >\r\n                <X className=\"h-5 w-5 text-gray-400\" />\r\n              </button>\r\n            </div>\r\n\r\n            {/* Quick Actions */}\r\n            <div className=\"flex items-center space-x-2 mt-4\">\r\n              {quickActions?.map(action => {\r\n                const Icon = action?.icon;\r\n                return (\r\n                  <button\r\n                    key={action?.id}\r\n                    onClick={action?.action}\r\n                    className={`\r\n                      flex items-center px-3 py-2 rounded-lg text-sm font-medium\r\n                      ${action?.color} transition-colors duration-200\r\n                    `}\r\n                  >\r\n                    <Icon className=\"h-4 w-4 mr-2\" />\r\n                    {action?.label}\r\n                  </button>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Subheader */}\r\n          <div className=\"px-6 py-3 bg-gray-50 border-b border-gray-200\">\r\n            <div className=\"flex items-center text-sm text-gray-600 space-x-4\">\r\n              <div className=\"flex items-center\">\r\n                {job?.vendor_id ? (\r\n                  <>\r\n                    <Building2 className=\"h-4 w-4 mr-1\" />\r\n                    {job?.vendor_name}\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <MapPin className=\"h-4 w-4 mr-1\" />\r\n                    On-Site\r\n                  </>\r\n                )}\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <Calendar className=\"h-4 w-4 mr-1\" />\r\n                Promise: {new Date(job?.promised_date)?.toLocaleDateString('en-US', { \r\n                  weekday: 'short', \r\n                  month: 'short', \r\n                  day: 'numeric' \r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Tabs */}\r\n          <div className=\"px-6 py-0 bg-white border-b border-gray-200\">\r\n            <div className=\"flex space-x-8\">\r\n              {tabs?.map(tab => {\r\n                const Icon = tab?.icon;\r\n                return (\r\n                  <button\r\n                    key={tab?.id}\r\n                    onClick={() => setActiveTab(tab?.id)}\r\n                    className={`\r\n                      flex items-center py-3 border-b-2 text-sm font-medium\r\n                      ${activeTab === tab?.id \r\n                        ? 'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\r\n                      }\r\n                    `}\r\n                  >\r\n                    <Icon className=\"h-4 w-4 mr-2\" />\r\n                    {tab?.label}\r\n                  </button>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Content */}\r\n          <div className=\"flex-1 overflow-y-auto px-6 py-6\">\r\n            {activeTab === 'details' && renderDetailsTab()}\r\n            {activeTab === 'customer' && renderCustomerTab()}\r\n            {activeTab === 'timeline' && renderTimelineTab()}\r\n            {activeTab === 'photos' && renderPhotosTab()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobDrawer;","import React, { useState, useMemo } from 'react';\r\nimport { \r\n  X, \r\n  Download, \r\n  Copy, \r\n  FileText, \r\n  Calendar,\r\n  Clock,\r\n  Car,\r\n  Building2,\r\n  MapPin,\r\n  Play,\r\n  CheckCircle,\r\n  XCircle,\r\n  RotateCcw\r\n} from 'lucide-react';\r\nimport { formatTime, getStatusBadge } from '../../../lib/time';\r\n\r\nconst RoundUpModal = ({ isOpen, onClose, jobs, type, onTypeChange }) => {\r\n  const [selectedJobs, setSelectedJobs] = useState(new Set());\r\n\r\n  // Helper function to group jobs by vendor\r\n  const groupByVendor = (jobList) => {\r\n    return jobList?.reduce((acc, job) => {\r\n      const vendorName = job?.vendor_name || 'Unassigned';\r\n      if (!acc?.[vendorName]) {\r\n        acc[vendorName] = [];\r\n      }\r\n      acc?.[vendorName]?.push(job);\r\n      return acc;\r\n    }, {});\r\n  };\r\n\r\n  // Helper function to group jobs by day\r\n  const groupJobsByDay = (jobList) => {\r\n    const today = new Date();\r\n    today?.setHours(0, 0, 0, 0);\r\n    \r\n    const todayJobs = jobList?.filter(job => {\r\n      const jobDate = new Date(job?.scheduled_start_time);\r\n      return jobDate?.toDateString() === today?.toDateString();\r\n    });\r\n\r\n    return {\r\n      'Today': {\r\n        onSite: todayJobs?.filter(job => !job?.vendor_id),\r\n        vendors: groupByVendor(todayJobs?.filter(job => job?.vendor_id))\r\n      }\r\n    };\r\n  };\r\n\r\n  // Helper function to group jobs by week\r\n  const groupJobsByWeek = (jobList) => {\r\n    const weekDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const result = {};\r\n\r\n    weekDays?.forEach(day => {\r\n      const dayJobs = jobList?.filter(job => {\r\n        const jobDate = new Date(job?.scheduled_start_time);\r\n        const dayOfWeek = jobDate?.getDay();\r\n        const dayIndex = weekDays?.indexOf(day);\r\n        return dayOfWeek === (dayIndex + 1) % 7; // Adjust for Monday start\r\n      });\r\n\r\n      if (dayJobs?.length > 0) {\r\n        result[day] = {\r\n          onSite: dayJobs?.filter(job => !job?.vendor_id),\r\n          vendors: groupByVendor(dayJobs?.filter(job => job?.vendor_id))\r\n        };\r\n      }\r\n    });\r\n\r\n    return result;\r\n  };\r\n\r\n  // Helper function to group jobs by month\r\n  const groupJobsByMonth = (jobList) => {\r\n    const weeks = {};\r\n    jobList?.forEach(job => {\r\n      const jobDate = new Date(job?.scheduled_start_time);\r\n      const weekNumber = Math.ceil(jobDate?.getDate() / 7);\r\n      const weekKey = `Week ${weekNumber}`;\r\n      \r\n      if (!weeks?.[weekKey]) {\r\n        weeks[weekKey] = {\r\n          onSite: [],\r\n          vendors: {}\r\n        };\r\n      }\r\n      \r\n      if (job?.vendor_id) {\r\n        if (!weeks?.[weekKey]?.vendors?.[job?.vendor_name]) {\r\n          weeks[weekKey].vendors[job?.vendor_name] = [];\r\n        }\r\n        weeks?.[weekKey]?.vendors?.[job?.vendor_name]?.push(job);\r\n      } else {\r\n        weeks?.[weekKey]?.onSite?.push(job);\r\n      }\r\n    });\r\n\r\n    return weeks;\r\n  };\r\n\r\n  const groupedJobs = useMemo(() => {\r\n    if (!jobs?.length) return {};\r\n\r\n    switch (type) {\r\n      case 'daily':\r\n        return groupJobsByDay(jobs);\r\n      case 'weekly':\r\n        return groupJobsByWeek(jobs);\r\n      case 'monthly':\r\n        return groupJobsByMonth(jobs);\r\n      default:\r\n        return groupJobsByDay(jobs);\r\n    }\r\n  }, [jobs, type]);\r\n\r\n  const handleJobAction = (jobId, action) => {\r\n    console.log(`${action} job ${jobId}`);\r\n    // Implement job actions\r\n  };\r\n\r\n  const handleSelectJob = (jobId) => {\r\n    const newSelected = new Set(selectedJobs);\r\n    if (newSelected?.has(jobId)) {\r\n      newSelected?.delete(jobId);\r\n    } else {\r\n      newSelected?.add(jobId);\r\n    }\r\n    setSelectedJobs(newSelected);\r\n  };\r\n\r\n  const handleExport = (format) => {\r\n    console.log(`Export ${format} for selected jobs:`, Array.from(selectedJobs));\r\n    // Implement export functionality\r\n  };\r\n\r\n  const renderJobRow = (job) => {\r\n    const statusBadge = getStatusBadge(job?.job_status);\r\n    \r\n    return (\r\n      <div key={job?.id} className=\"flex items-center py-3 border-b border-gray-100 last:border-b-0\">\r\n        {/* Checkbox */}\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={selectedJobs?.has(job?.id)}\r\n          onChange={() => handleSelectJob(job?.id)}\r\n          className=\"mr-3 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\r\n        />\r\n        {/* Job Info */}\r\n        <div className=\"flex-1 grid grid-cols-6 gap-4 items-center text-sm\">\r\n          {/* Time */}\r\n          <div className=\"flex items-center text-gray-900\">\r\n            <Clock className=\"h-3 w-3 mr-1 text-gray-400\" />\r\n            {job?.scheduled_start_time \r\n              ? `${formatTime(job?.scheduled_start_time)}–${formatTime(job?.scheduled_end_time)}`\r\n              : 'Unscheduled'\r\n            }\r\n          </div>\r\n\r\n          {/* Stock & Product */}\r\n          <div className=\"flex items-center text-gray-900\">\r\n            <Car className=\"h-3 w-3 mr-1 text-gray-400\" />\r\n            {job?.job_number?.split('-')?.pop()} | {job?.title}\r\n          </div>\r\n\r\n          {/* Promise Date */}\r\n          <div className=\"flex items-center text-gray-600\">\r\n            <Calendar className=\"h-3 w-3 mr-1 text-gray-400\" />\r\n            {new Date(job?.promised_date)?.toLocaleDateString('en-US', { \r\n              month: 'short', \r\n              day: 'numeric' \r\n            })}\r\n          </div>\r\n\r\n          {/* Location */}\r\n          <div className=\"flex items-center text-gray-600\">\r\n            {job?.vendor_id ? (\r\n              <>\r\n                <Building2 className=\"h-3 w-3 mr-1 text-orange-500\" />\r\n                {job?.vendor_name}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <MapPin className=\"h-3 w-3 mr-1 text-green-500\" />\r\n                On-Site\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          {/* Status */}\r\n          <div className={`\r\n            inline-flex px-2 py-1 rounded-full text-xs font-medium\r\n            ${statusBadge?.bg || 'bg-gray-100'} \r\n            ${statusBadge?.textColor || 'text-gray-800'}\r\n          `}>\r\n            {statusBadge?.label || job?.job_status?.toUpperCase()}\r\n          </div>\r\n\r\n          {/* Quick Actions */}\r\n          <div className=\"flex items-center space-x-1\">\r\n            <button\r\n              onClick={() => handleJobAction(job?.id, 'start')}\r\n              className=\"p-1 hover:bg-green-100 rounded text-green-600\"\r\n              title=\"Start\"\r\n            >\r\n              <Play className=\"h-3 w-3\" />\r\n            </button>\r\n            <button\r\n              onClick={() => handleJobAction(job?.id, 'complete')}\r\n              className=\"p-1 hover:bg-blue-100 rounded text-blue-600\"\r\n              title=\"Complete\"\r\n            >\r\n              <CheckCircle className=\"h-3 w-3\" />\r\n            </button>\r\n            <button\r\n              onClick={() => handleJobAction(job?.id, 'no_show')}\r\n              className=\"p-1 hover:bg-gray-100 rounded text-gray-600\"\r\n              title=\"No-Show\"\r\n            >\r\n              <XCircle className=\"h-3 w-3\" />\r\n            </button>\r\n            <button\r\n              onClick={() => handleJobAction(job?.id, 'reschedule')}\r\n              className=\"p-1 hover:bg-orange-100 rounded text-orange-600\"\r\n              title=\"Reschedule\"\r\n            >\r\n              <RotateCcw className=\"h-3 w-3\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderJobGroup = (groupName, groupData) => {\r\n    return (\r\n      <div key={groupName} className=\"mb-8\">\r\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4 flex items-center\">\r\n          <Calendar className=\"h-5 w-5 mr-2 text-gray-600\" />\r\n          {groupName}\r\n        </h3>\r\n\r\n        {/* On-Site Jobs */}\r\n        {groupData?.onSite?.length > 0 && (\r\n          <div className=\"mb-6\">\r\n            <div className=\"flex items-center mb-3\">\r\n              <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\"></div>\r\n              <h4 className=\"font-medium text-green-900\">On-Site (PLV)</h4>\r\n              <span className=\"ml-2 text-sm text-gray-600\">\r\n                ({groupData?.onSite?.length} jobs)\r\n              </span>\r\n            </div>\r\n            <div className=\"bg-green-50 rounded-lg p-4\">\r\n              {groupData?.onSite?.map(renderJobRow)}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Vendor Jobs */}\r\n        {Object.entries(groupData?.vendors || {})?.map(([vendorName, vendorJobs]) => (\r\n          <div key={vendorName} className=\"mb-6\">\r\n            <div className=\"flex items-center mb-3\">\r\n              <div className=\"w-3 h-3 bg-orange-500 rounded-full mr-2\"></div>\r\n              <h4 className=\"font-medium text-orange-900\">{vendorName}</h4>\r\n              <span className=\"ml-2 text-sm text-gray-600\">\r\n                ({vendorJobs?.length} jobs)\r\n              </span>\r\n            </div>\r\n            <div className=\"bg-orange-50 rounded-lg p-4\">\r\n              {vendorJobs?.map(renderJobRow)}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 overflow-hidden\">\r\n      <div className=\"absolute inset-0 bg-black bg-opacity-50\" onClick={onClose}></div>\r\n      <div className=\"absolute right-0 top-0 h-full w-full max-w-6xl bg-white shadow-xl\">\r\n        <div className=\"flex flex-col h-full\">\r\n          {/* Header */}\r\n          <div className=\"px-6 py-4 border-b border-gray-200 bg-white\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center\">\r\n                <Download className=\"h-5 w-5 text-gray-600 mr-3\" />\r\n                <div>\r\n                  <h2 className=\"text-xl font-semibold text-gray-900\">Round-Up View</h2>\r\n                  <p className=\"text-sm text-gray-600\">Export and manage scheduled jobs</p>\r\n                </div>\r\n              </div>\r\n              \r\n              <button\r\n                onClick={onClose}\r\n                className=\"p-2 hover:bg-gray-100 rounded-full\"\r\n              >\r\n                <X className=\"h-5 w-5 text-gray-400\" />\r\n              </button>\r\n            </div>\r\n\r\n            {/* Controls */}\r\n            <div className=\"flex items-center justify-between mt-4\">\r\n              {/* Type Toggle */}\r\n              <div className=\"flex items-center bg-gray-100 rounded-lg p-1\">\r\n                <button\r\n                  onClick={() => onTypeChange?.('daily')}\r\n                  className={`px-3 py-1 rounded text-sm ${type === 'daily' ? 'bg-white shadow-sm' : ''}`}\r\n                >\r\n                  Daily\r\n                </button>\r\n                <button\r\n                  onClick={() => onTypeChange?.('weekly')}\r\n                  className={`px-3 py-1 rounded text-sm ${type === 'weekly' ? 'bg-white shadow-sm' : ''}`}\r\n                >\r\n                  Weekly\r\n                </button>\r\n                <button\r\n                  onClick={() => onTypeChange?.('monthly')}\r\n                  className={`px-3 py-1 rounded text-sm ${type === 'monthly' ? 'bg-white shadow-sm' : ''}`}\r\n                >\r\n                  Monthly\r\n                </button>\r\n              </div>\r\n\r\n              {/* Export Actions */}\r\n              <div className=\"flex items-center space-x-2\">\r\n                <span className=\"text-sm text-gray-600\">\r\n                  {selectedJobs?.size} selected\r\n                </span>\r\n                <button\r\n                  onClick={() => handleExport('copy')}\r\n                  className=\"flex items-center px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50\"\r\n                >\r\n                  <Copy className=\"h-4 w-4 mr-2\" />\r\n                  Copy\r\n                </button>\r\n                <button\r\n                  onClick={() => handleExport('csv')}\r\n                  className=\"flex items-center px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50\"\r\n                >\r\n                  <FileText className=\"h-4 w-4 mr-2\" />\r\n                  CSV\r\n                </button>\r\n                <button\r\n                  onClick={() => handleExport('pdf')}\r\n                  className=\"flex items-center px-3 py-2 bg-indigo-600 text-white text-sm rounded-lg hover:bg-indigo-700\"\r\n                >\r\n                  <Download className=\"h-4 w-4 mr-2\" />\r\n                  PDF\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Content */}\r\n          <div className=\"flex-1 overflow-y-auto px-6 py-6\">\r\n            {Object.keys(groupedJobs)?.length > 0 ? (\r\n              Object.entries(groupedJobs)?.map(([groupName, groupData]) => \r\n                renderJobGroup(groupName, groupData)\r\n              )\r\n            ) : (\r\n              <div className=\"text-center py-12 text-gray-500\">\r\n                <Calendar className=\"h-8 w-8 mx-auto mb-3 text-gray-400\" />\r\n                <div className=\"text-lg\">No jobs scheduled</div>\r\n                <div className=\"text-sm\">for the selected {type} period</div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoundUpModal;","import React, { useState, useEffect, useRef } from 'react'\r\nimport {\r\n  Calendar,\r\n  Clock,\r\n  Car,\r\n  Building2,\r\n  AlertTriangle,\r\n  Search,\r\n  Download,\r\n  Eye,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n} from 'lucide-react'\r\nimport AppLayout from '../../components/layouts/AppLayout'\r\nimport { calendarService } from '../../services/calendarService'\r\nimport { vendorService } from '../../services/vendorService'\r\nimport QuickFilters from './components/QuickFilters'\r\n\r\nimport UnassignedQueue from './components/UnassignedQueue'\r\nimport JobDrawer from './components/JobDrawer'\r\nimport RoundUpModal from './components/RoundUpModal'\r\nimport { formatTime, isOverdue, getStatusBadge } from '../../lib/time'\r\n\r\nconst CalendarFlowManagementCenter = () => {\r\n  // State management\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  // Separate original data from filtered data\r\n  const [originalJobs, setOriginalJobs] = useState([])\r\n  const [originalUnassignedJobs, setOriginalUnassignedJobs] = useState([])\r\n  const [filteredJobs, setFilteredJobs] = useState([])\r\n  const [filteredUnassignedJobs, setFilteredUnassignedJobs] = useState([])\r\n\r\n  const [vendors, setVendors] = useState([])\r\n  const [selectedJob, setSelectedJob] = useState(null)\r\n  const [showDrawer, setShowDrawer] = useState(false)\r\n  const [showRoundUp, setShowRoundUp] = useState(false)\r\n  const [roundUpType, setRoundUpType] = useState('daily')\r\n\r\n  // View settings - Updated default and possible values\r\n  const [viewMode, setViewMode] = useState('week') // week, day, month\r\n  const [vendorLanesEnabled, setVendorLanesEnabled] = useState(true)\r\n  const [currentDate, setCurrentDate] = useState(new Date())\r\n\r\n  // Filters\r\n  const [filters, setFilters] = useState({\r\n    vendors: [],\r\n    statuses: [],\r\n    showUnassigned: true,\r\n    searchQuery: '',\r\n  })\r\n\r\n  // Drag and drop\r\n  const [draggedJob, setDraggedJob] = useState(null)\r\n  const [dropZoneActive, setDropZoneActive] = useState(null)\r\n\r\n  // Load initial data\r\n  useEffect(() => {\r\n    loadCalendarData()\r\n    loadVendors()\r\n  }, [currentDate, viewMode])\r\n\r\n  // Apply filters whenever filters or original data change\r\n  useEffect(() => {\r\n    applyFilters()\r\n  }, [filters, originalJobs, originalUnassignedJobs])\r\n\r\n  const loadCalendarData = async () => {\r\n    setLoading(true)\r\n    try {\r\n      const startDate = getViewStartDate()\r\n      const endDate = getViewEndDate()\r\n\r\n      // Load all jobs without status filtering to allow client-side filtering\r\n      const { data: jobsData, error } = await calendarService?.getJobsByDateRange(\r\n        startDate,\r\n        endDate,\r\n        {\r\n          vendorId: filters?.vendors?.length > 0 ? filters?.vendors?.[0] : null,\r\n          // Removed status filter to load all jobs for client-side filtering\r\n        }\r\n      )\r\n\r\n      if (!error && jobsData) {\r\n        const assignedJobs = jobsData?.filter((job) => job?.vendor_id)\r\n        const unassigned = jobsData?.filter((job) => !job?.vendor_id)\r\n\r\n        // Store original data separately\r\n        setOriginalJobs(assignedJobs)\r\n        setOriginalUnassignedJobs(unassigned)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading calendar data:', error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // New centralized filter application function\r\n  const applyFilters = () => {\r\n    // Apply filters to assigned jobs\r\n    const filteredAssigned = applyFiltersToJobList(originalJobs)\r\n    setFilteredJobs(filteredAssigned)\r\n\r\n    // Apply filters to unassigned jobs\r\n    const filteredUnassigned = applyFiltersToJobList(originalUnassignedJobs)\r\n    setFilteredUnassignedJobs(filteredUnassigned)\r\n  }\r\n\r\n  // Enhanced filter application function\r\n  const applyFiltersToJobList = (jobList) => {\r\n    if (!jobList || jobList?.length === 0) return []\r\n\r\n    let filteredJobs = [...jobList]\r\n\r\n    // Apply search filter\r\n    if (filters?.searchQuery) {\r\n      const query = filters?.searchQuery?.toLowerCase()\r\n      filteredJobs = filteredJobs?.filter(\r\n        (job) =>\r\n          job?.job_number?.toLowerCase()?.includes(query) ||\r\n          job?.title?.toLowerCase()?.includes(query) ||\r\n          job?.vehicle_info?.toLowerCase()?.includes(query) ||\r\n          job?.customer_name?.toLowerCase()?.includes(query) ||\r\n          job?.customer_phone?.toLowerCase()?.includes(query)\r\n      )\r\n    }\r\n\r\n    // Apply status filters (multiple statuses)\r\n    if (filters?.statuses?.length > 0) {\r\n      filteredJobs = filteredJobs?.filter((job) => {\r\n        // Map filter IDs to actual job status values\r\n        const statusMapping = {\r\n          today: () => {\r\n            const jobDate = new Date(job?.scheduled_start_time)\r\n            const today = new Date()\r\n            return jobDate?.toDateString() === today?.toDateString()\r\n          },\r\n          in_progress: () => job?.job_status === 'in_progress',\r\n          overdue: () => isOverdue(job?.promised_date),\r\n          no_show: () => job?.job_status === 'no_show',\r\n          completed: () => job?.job_status === 'completed',\r\n        }\r\n\r\n        // Check if job matches any of the selected statuses\r\n        return filters?.statuses?.some((statusId) => statusMapping?.[statusId]?.())\r\n      })\r\n    }\r\n\r\n    // Apply vendor filters\r\n    if (filters?.vendors?.length > 0) {\r\n      filteredJobs = filteredJobs?.filter((job) => filters?.vendors?.includes(job?.vendor_id))\r\n    }\r\n\r\n    return filteredJobs\r\n  }\r\n\r\n  const loadVendors = async () => {\r\n    try {\r\n      const { data: vendorsData } = await vendorService?.getVendors({ is_active: true })\r\n      if (vendorsData) {\r\n        setVendors(vendorsData)\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading vendors:', error)\r\n    }\r\n  }\r\n\r\n  const getViewStartDate = () => {\r\n    const date = new Date(currentDate)\r\n    switch (viewMode) {\r\n      case 'day':\r\n        date?.setHours(0, 0, 0, 0)\r\n        return date\r\n      case 'week':\r\n        const dayOfWeek = date?.getDay()\r\n        date?.setDate(date?.getDate() - dayOfWeek + 1) // Monday start\r\n        date?.setHours(0, 0, 0, 0)\r\n        return date\r\n      case 'month':\r\n        date?.setDate(1) // First day of the month\r\n        date?.setHours(0, 0, 0, 0)\r\n        return date\r\n      default:\r\n        date?.setHours(0, 0, 0, 0)\r\n        return date\r\n    }\r\n  }\r\n\r\n  const getViewEndDate = () => {\r\n    const date = getViewStartDate()\r\n    switch (viewMode) {\r\n      case 'day':\r\n        date?.setDate(date?.getDate() + 1)\r\n        return date\r\n      case 'week':\r\n        date?.setDate(date?.getDate() + 6) // Monday to Saturday\r\n        return date\r\n      case 'month':\r\n        date?.setMonth(date?.getMonth() + 1) // Next month\r\n        date?.setDate(0) // Last day of current month\r\n        return date\r\n      default:\r\n        date?.setDate(date?.getDate() + 1)\r\n        return date\r\n    }\r\n  }\r\n\r\n  const handleJobClick = (job) => {\r\n    setSelectedJob(job)\r\n    setShowDrawer(true)\r\n  }\r\n\r\n  const handleJobStatusUpdate = async (jobId, newStatus) => {\r\n    try {\r\n      // Update job status via calendar service\r\n      await calendarService?.updateJobSchedule(jobId, { status: newStatus })\r\n      loadCalendarData() // Refresh data\r\n    } catch (error) {\r\n      console.error('Error updating job status:', error)\r\n    }\r\n  }\r\n\r\n  const handleDragStart = (job) => {\r\n    setDraggedJob(job)\r\n  }\r\n\r\n  const handleDragEnd = () => {\r\n    setDraggedJob(null)\r\n    setDropZoneActive(null)\r\n  }\r\n\r\n  const handleDrop = async (vendorId, timeSlot) => {\r\n    if (!draggedJob) return\r\n\r\n    try {\r\n      const startTime = new Date(timeSlot)\r\n      const endTime = new Date(startTime)\r\n      endTime?.setHours(startTime?.getHours() + (draggedJob?.estimated_hours || 2))\r\n\r\n      await calendarService?.updateJobSchedule(draggedJob?.id, {\r\n        vendorId,\r\n        startTime,\r\n        endTime,\r\n        location: vendorId ? 'off_site' : 'on_site',\r\n      })\r\n\r\n      loadCalendarData()\r\n    } catch (error) {\r\n      console.error('Error updating job assignment:', error)\r\n    }\r\n  }\r\n\r\n  // New month view render function\r\n  const renderMonthView = () => {\r\n    const monthStart = getViewStartDate()\r\n    const monthEnd = getViewEndDate()\r\n    const startDate = new Date(monthStart)\r\n    const endDate = new Date(monthEnd)\r\n\r\n    // Get first day of the week that contains the first day of the month\r\n    startDate?.setDate(startDate?.getDate() - startDate?.getDay() + 1) // Monday start\r\n    // Get last day of the week that contains the last day of the month\r\n    endDate?.setDate(endDate?.getDate() + (6 - endDate?.getDay()) + 1)\r\n\r\n    const weeks = []\r\n    const currentWeekStart = new Date(startDate)\r\n\r\n    while (currentWeekStart <= endDate) {\r\n      const week = []\r\n      for (let day = 0; day < 7; day++) {\r\n        const currentDate = new Date(currentWeekStart)\r\n        currentDate?.setDate(currentWeekStart?.getDate() + day)\r\n\r\n        const dayJobs = filteredJobs?.filter((job) => {\r\n          const jobDate = new Date(job?.scheduled_start_time)\r\n          return jobDate?.toDateString() === currentDate?.toDateString()\r\n        })\r\n\r\n        week?.push({\r\n          date: new Date(currentDate),\r\n          jobs: dayJobs,\r\n          isCurrentMonth: currentDate?.getMonth() === monthStart?.getMonth(),\r\n          isToday: currentDate?.toDateString() === new Date()?.toDateString(),\r\n        })\r\n      }\r\n      weeks?.push(week)\r\n      currentWeekStart?.setDate(currentWeekStart?.getDate() + 7)\r\n    }\r\n\r\n    return (\r\n      <div className=\"h-full flex flex-col\">\r\n        {/* Month header with days of week */}\r\n        <div className=\"grid grid-cols-7 gap-2 mb-4 border-b border-gray-200 pb-2\">\r\n          {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']?.map((day) => (\r\n            <div key={day} className=\"text-center text-sm font-medium text-gray-500 py-2\">\r\n              {day}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Month grid */}\r\n        <div className=\"flex-1 space-y-2\">\r\n          {weeks?.map((week, weekIndex) => (\r\n            <div key={weekIndex} className=\"grid grid-cols-7 gap-2 h-32\">\r\n              {week?.map((day, dayIndex) => (\r\n                <div\r\n                  key={dayIndex}\r\n                  className={`\r\n                    border border-gray-200 rounded-lg p-2 overflow-hidden\r\n                    ${day?.isCurrentMonth ? 'bg-white' : 'bg-gray-50'}\r\n                    ${day?.isToday ? 'ring-2 ring-indigo-500' : ''}\r\n                  `}\r\n                >\r\n                  {/* Day number */}\r\n                  <div\r\n                    className={`\r\n                    text-sm font-medium mb-2\r\n                    ${day?.isCurrentMonth ? 'text-gray-900' : 'text-gray-400'}\r\n                    ${day?.isToday ? 'text-indigo-600' : ''}\r\n                  `}\r\n                  >\r\n                    {day?.date?.getDate()}\r\n                  </div>\r\n\r\n                  {/* Jobs for this day */}\r\n                  <div className=\"space-y-1\">\r\n                    {day?.jobs?.slice(0, 2)?.map((job) => (\r\n                      <div\r\n                        key={job?.id}\r\n                        className={`\r\n                          text-xs p-1 rounded cursor-pointer truncate\r\n                          ${!job?.vendor_id || job?.location === 'on_site' ? 'bg-green-100 text-green-800 border border-green-200' : 'bg-orange-100 text-orange-800 border border-orange-200'}\r\n                        `}\r\n                        onClick={() => handleJobClick(job)}\r\n                        title={`${job?.job_number} - ${job?.title}`}\r\n                      >\r\n                        {job?.job_number?.split('-')?.pop()}\r\n                      </div>\r\n                    ))}\r\n                    {day?.jobs?.length > 2 && (\r\n                      <div className=\"text-xs text-gray-500 text-center\">\r\n                        +{day?.jobs?.length - 2} more\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Updated renderEventChip to work with filtered data\r\n  const renderEventChip = (job) => {\r\n    const isOnSite = !job?.vendor_id || job?.location === 'on_site'\r\n    const chipColor = isOnSite ? 'bg-green-500' : 'bg-orange-500'\r\n    const statusColor = getStatusBadge(job?.job_status)?.color || 'bg-blue-500'\r\n    const overdue = isOverdue(job?.promised_date)\r\n\r\n    return (\r\n      <div\r\n        key={job?.id}\r\n        className={`\r\n          relative rounded-lg p-3 mb-2 cursor-pointer transition-all duration-200 hover:shadow-lg\r\n          ${chipColor} text-white text-sm\r\n        `}\r\n        onClick={() => handleJobClick(job)}\r\n        draggable\r\n        onDragStart={() => handleDragStart(job)}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        {/* Status stripe */}\r\n        <div className={`absolute left-0 top-0 bottom-0 w-1 ${statusColor} rounded-l-lg`} />\r\n\r\n        {/* Main content */}\r\n        <div className=\"ml-2\">\r\n          {/* Top line */}\r\n          <div className=\"flex items-center justify-between mb-1\">\r\n            <div className=\"font-bold truncate flex items-center gap-2\">\r\n              <Car className=\"h-3 w-3 mr-1\" />\r\n              <span className=\"truncate\">\r\n                {job?.job_number?.split('-')?.pop()} • {job?.title}\r\n              </span>\r\n              {(job?.has_active_loaner || job?.loaner_id || job?.customer_needs_loaner) && (\r\n                <span className=\"px-1.5 py-0.5 rounded-full text-[10px] font-semibold bg-violet-100 text-violet-800 whitespace-nowrap\">\r\n                  Loaner\r\n                </span>\r\n              )}\r\n            </div>\r\n            {overdue && (\r\n              <div className=\"flex items-center text-red-200\">\r\n                <AlertTriangle className=\"h-3 w-3\" />\r\n                <span className=\"text-xs ml-1\">Overdue</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Second line */}\r\n          <div className=\"text-xs opacity-90 flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <div className=\"flex items-center\">\r\n                <Clock className=\"h-3 w-3 mr-1\" />\r\n                {formatTime(job?.scheduled_start_time)}–{formatTime(job?.scheduled_end_time)}\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <Calendar className=\"h-3 w-3 mr-1\" />\r\n                {job?.next_promised_short\r\n                  ? `Promise: ${job?.next_promised_short}`\r\n                  : `Promise: ${new Date(job?.promised_date)?.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}`}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Status badge */}\r\n            <div\r\n              className={`px-2 py-1 rounded-full text-xs ${getStatusBadge(job?.job_status)?.bg || 'bg-gray-500'} text-white`}\r\n            >\r\n              {getStatusBadge(job?.job_status)?.label || job?.job_status}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Vendor line for off-site */}\r\n          {!isOnSite && (\r\n            <div className=\"text-xs opacity-90 mt-1 flex items-center\">\r\n              <Building2 className=\"h-3 w-3 mr-1\" />\r\n              {job?.vendor_name}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderWeekView = () => {\r\n    const weekDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n    const timeSlots = Array.from({ length: 10 }, (_, i) => 8 + i) // 8AM to 6PM\r\n\r\n    return (\r\n      <div className=\"grid grid-cols-7 gap-2 h-full\">\r\n        {/* Time header */}\r\n        <div className=\"col-span-1 space-y-12\">\r\n          <div className=\"h-12\"></div> {/* Header spacer */}\r\n          {timeSlots?.map((hour) => (\r\n            <div key={hour} className=\"text-xs text-gray-500 text-right pr-2\">\r\n              {hour}:00\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {/* Week days */}\r\n        {weekDays?.map((day, dayIndex) => {\r\n          const dayDate = new Date(getViewStartDate())\r\n          dayDate?.setDate(dayDate?.getDate() + dayIndex)\r\n          const dayJobs = filteredJobs?.filter((job) => {\r\n            const jobDate = new Date(job?.scheduled_start_time)\r\n            return jobDate?.toDateString() === dayDate?.toDateString()\r\n          })\r\n\r\n          return (\r\n            <div key={day} className=\"border-l border-gray-200 pl-2\">\r\n              {/* Day header */}\r\n              <div className=\"h-12 border-b border-gray-200 pb-2\">\r\n                <div className=\"font-medium text-sm\">{day}</div>\r\n                <div className=\"text-xs text-gray-500\">\r\n                  {dayDate?.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\r\n                </div>\r\n              </div>\r\n              {/* Time slots */}\r\n              <div className=\"space-y-12\">\r\n                {timeSlots?.map((hour) => (\r\n                  <div\r\n                    key={`${day}-${hour}`}\r\n                    className=\"h-12 border-b border-gray-100 relative\"\r\n                    onDragOver={(e) => e?.preventDefault()}\r\n                    onDrop={() => handleDrop(null, new Date(dayDate?.setHours(hour)))}\r\n                  >\r\n                    {/* Jobs for this time slot */}\r\n                    {dayJobs\r\n                      ?.filter((job) => {\r\n                        const jobStart = new Date(job?.scheduled_start_time)\r\n                        return jobStart?.getHours() === hour\r\n                      })\r\n                      ?.map(renderEventChip)}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderVendorLanes = () => {\r\n    const timeSlots = Array.from({ length: 10 }, (_, i) => 8 + i)\r\n\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        {/* On-Site Lane */}\r\n        <div className=\"bg-green-50 rounded-lg p-4\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-4 h-4 bg-green-500 rounded mr-3\"></div>\r\n              <h3 className=\"font-medium\">On-Site (PLV)</h3>\r\n            </div>\r\n            <div className=\"text-sm text-gray-600\">\r\n              {\r\n                filteredJobs?.filter((job) => !job?.vendor_id || job?.location === 'on_site')\r\n                  ?.length\r\n              }{' '}\r\n              jobs\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-6 gap-2\">\r\n            {filteredJobs\r\n              ?.filter((job) => !job?.vendor_id || job?.location === 'on_site')\r\n              ?.map(renderEventChip)}\r\n          </div>\r\n        </div>\r\n        {/* Vendor Lanes */}\r\n        {vendors?.map((vendor) => {\r\n          const vendorJobs = filteredJobs?.filter((job) => job?.vendor_id === vendor?.id)\r\n          const capacity = vendorJobs?.length\r\n          const maxCapacity = 7 // Default capacity\r\n\r\n          return (\r\n            <div key={vendor?.id} className=\"bg-orange-50 rounded-lg p-4\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <div className=\"flex items-center\">\r\n                  <div className=\"w-4 h-4 bg-orange-500 rounded mr-3\"></div>\r\n                  <div>\r\n                    <h3 className=\"font-medium\">{vendor?.name}</h3>\r\n                    <div className=\"text-sm text-gray-600\">{vendor?.specialty}</div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"text-sm font-medium\">\r\n                    {capacity} / {maxCapacity}\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-600\">scheduled / capacity</div>\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"grid grid-cols-6 gap-2 min-h-[60px] border-2 border-dashed border-orange-200 rounded p-2\"\r\n                onDragOver={(e) => e?.preventDefault()}\r\n                onDrop={() => handleDrop(vendor?.id)}\r\n              >\r\n                {vendorJobs?.map(renderEventChip)}\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <AppLayout>\r\n      <div className=\"min-h-screen bg-gray-50\">\r\n        {/* Header */}\r\n        <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-2xl font-bold text-gray-900\">Calendar Flow Management Center</h1>\r\n              <p className=\"text-gray-600\">Visual scheduling and workflow management</p>\r\n            </div>\r\n\r\n            <div className=\"flex items-center space-x-4\">\r\n              {/* Updated View Toggle - Replace Agenda with Month */}\r\n              <div className=\"flex items-center bg-gray-100 rounded-lg p-1\">\r\n                <button\r\n                  onClick={() => setViewMode('day')}\r\n                  className={`px-3 py-1 rounded text-sm ${viewMode === 'day' ? 'bg-white shadow-sm' : ''}`}\r\n                >\r\n                  Day\r\n                </button>\r\n                <button\r\n                  onClick={() => setViewMode('week')}\r\n                  className={`px-3 py-1 rounded text-sm ${viewMode === 'week' ? 'bg-white shadow-sm' : ''}`}\r\n                >\r\n                  Week\r\n                </button>\r\n                <button\r\n                  onClick={() => setViewMode('month')}\r\n                  className={`px-3 py-1 rounded text-sm ${viewMode === 'month' ? 'bg-white shadow-sm' : ''}`}\r\n                >\r\n                  Month\r\n                </button>\r\n              </div>\r\n\r\n              {/* Vendor Lanes Toggle - Hide for month view */}\r\n              {viewMode !== 'month' && (\r\n                <button\r\n                  onClick={() => setVendorLanesEnabled(!vendorLanesEnabled)}\r\n                  className={`flex items-center px-4 py-2 rounded-lg border ${\r\n                    vendorLanesEnabled\r\n                      ? 'bg-blue-50 border-blue-200 text-blue-700'\r\n                      : 'bg-white border-gray-200 text-gray-700'\r\n                  }`}\r\n                >\r\n                  <Eye className=\"h-4 w-4 mr-2\" />\r\n                  Vendor Lanes\r\n                </button>\r\n              )}\r\n\r\n              {/* Round-up Button */}\r\n              <button\r\n                onClick={() => setShowRoundUp(true)}\r\n                className=\"flex items-center px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700\"\r\n              >\r\n                <Download className=\"h-4 w-4 mr-2\" />\r\n                Round-Up\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Navigation and Filters */}\r\n          <div className=\"flex items-center justify-between mt-6\">\r\n            {/* Updated Date Navigation to handle month view */}\r\n            <div className=\"flex items-center space-x-4\">\r\n              <button\r\n                onClick={() => {\r\n                  const newDate = new Date(currentDate)\r\n                  if (viewMode === 'month') {\r\n                    newDate?.setMonth(newDate?.getMonth() - 1)\r\n                  } else if (viewMode === 'week') {\r\n                    newDate?.setDate(newDate?.getDate() - 7)\r\n                  } else {\r\n                    newDate?.setDate(newDate?.getDate() - 1)\r\n                  }\r\n                  setCurrentDate(newDate)\r\n                }}\r\n                className=\"p-2 hover:bg-gray-100 rounded-lg\"\r\n              >\r\n                <ChevronLeft className=\"h-5 w-5\" />\r\n              </button>\r\n\r\n              <div className=\"text-lg font-medium\">\r\n                {viewMode === 'month'\r\n                  ? currentDate?.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })\r\n                  : viewMode === 'week'\r\n                    ? `Week of ${currentDate?.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}`\r\n                    : currentDate?.toLocaleDateString('en-US', {\r\n                        weekday: 'long',\r\n                        month: 'long',\r\n                        day: 'numeric',\r\n                        year: 'numeric',\r\n                      })}\r\n              </div>\r\n\r\n              <button\r\n                onClick={() => {\r\n                  const newDate = new Date(currentDate)\r\n                  if (viewMode === 'month') {\r\n                    newDate?.setMonth(newDate?.getMonth() + 1)\r\n                  } else if (viewMode === 'week') {\r\n                    newDate?.setDate(newDate?.getDate() + 7)\r\n                  } else {\r\n                    newDate?.setDate(newDate?.getDate() + 1)\r\n                  }\r\n                  setCurrentDate(newDate)\r\n                }}\r\n                className=\"p-2 hover:bg-gray-100 rounded-lg\"\r\n              >\r\n                <ChevronRight className=\"h-5 w-5\" />\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => setCurrentDate(new Date())}\r\n                className=\"px-4 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg\"\r\n              >\r\n                Today\r\n              </button>\r\n            </div>\r\n\r\n            {/* Search */}\r\n            <div className=\"flex items-center space-x-4\">\r\n              <div className=\"relative\">\r\n                <Search className=\"h-4 w-4 absolute left-3 top-3 text-gray-400\" />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search stock #, phone, customer...\"\r\n                  value={filters?.searchQuery}\r\n                  onChange={(e) =>\r\n                    setFilters((prev) => ({ ...prev, searchQuery: e?.target?.value }))\r\n                  }\r\n                  className=\"pl-10 pr-4 py-2 border border-gray-200 rounded-lg w-80\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quick Filters - Updated to use original data for counts */}\r\n        <QuickFilters\r\n          filters={filters}\r\n          onFiltersChange={setFilters}\r\n          jobCounts={{\r\n            today: [...originalJobs, ...originalUnassignedJobs]?.filter((j) => {\r\n              const jobDate = new Date(j?.scheduled_start_time)\r\n              const today = new Date()\r\n              return jobDate?.toDateString() === today?.toDateString()\r\n            })?.length,\r\n            inProgress: [...originalJobs, ...originalUnassignedJobs]?.filter(\r\n              (j) => j?.job_status === 'in_progress'\r\n            )?.length,\r\n            overdue: [...originalJobs, ...originalUnassignedJobs]?.filter((j) =>\r\n              isOverdue(j?.promised_date)\r\n            )?.length,\r\n            noShow: [...originalJobs, ...originalUnassignedJobs]?.filter(\r\n              (j) => j?.job_status === 'no_show'\r\n            )?.length,\r\n            completed: [...originalJobs, ...originalUnassignedJobs]?.filter(\r\n              (j) => j?.job_status === 'completed'\r\n            )?.length,\r\n          }}\r\n        />\r\n\r\n        {/* Main Content */}\r\n        <div className=\"flex h-screen\">\r\n          {/* Unassigned Queue Sidebar - Hide for month view */}\r\n          {viewMode !== 'month' && (\r\n            <UnassignedQueue\r\n              jobs={filteredUnassignedJobs}\r\n              onJobClick={handleJobClick}\r\n              onDragStart={handleDragStart}\r\n              loading={loading}\r\n            />\r\n          )}\r\n\r\n          {/* Calendar View */}\r\n          <div className={`flex-1 p-6 ${viewMode === 'month' ? 'w-full' : ''}`}>\r\n            {loading ? (\r\n              <div className=\"flex items-center justify-center h-64\">\r\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600\"></div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 h-full overflow-auto\">\r\n                {viewMode === 'month'\r\n                  ? renderMonthView()\r\n                  : vendorLanesEnabled\r\n                    ? renderVendorLanes()\r\n                    : renderWeekView()}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Job Details Drawer */}\r\n        <JobDrawer\r\n          job={selectedJob}\r\n          isOpen={showDrawer}\r\n          onClose={() => setShowDrawer(false)}\r\n          onStatusUpdate={handleJobStatusUpdate}\r\n        />\r\n\r\n        {/* Round-up Modal - Updated to use filtered data */}\r\n        <RoundUpModal\r\n          isOpen={showRoundUp}\r\n          onClose={() => setShowRoundUp(false)}\r\n          jobs={filteredJobs}\r\n          type={roundUpType}\r\n          onTypeChange={setRoundUpType}\r\n        />\r\n      </div>\r\n    </AppLayout>\r\n  )\r\n}\r\n\r\nexport default CalendarFlowManagementCenter\r\n"],"names":["calendarService","startDate","endDate","filters","data","error","_a","supabase","vendorId","startTime","endTime","excludeJobId","jobId","scheduleData","orgId","updateData","_b","_c","_d","key","q","_i","_h","_g","_f","_e","safeSelect","jobData","jobNumber","jobNumberError","newJobData","dateRange","now","totalQ","totalJobs","totalErr","schedQ","scheduledJobs","schedErr","overdueJobs","vendorsQ","_j","activeVendors","vErr","jobs","hasOverlap","job","jobStart","jobEnd","vendorService","rows","toOptions","e","term","id","QuickFilters","onFiltersChange","jobCounts","filterChips","Calendar","Clock","AlertTriangle","UserX","CheckCircle","isStatusActive","statusId","toggleStatus","currentStatuses","newStatuses","s","jsxs","jsx","Filter","chip","Icon","isActive","Check","safeCreateDate","input","date","formatTime","timeString","isOverdue","promiseDate","promise","getStatusBadge","status","statusMap","UnassignedQueue","onJobClick","onDragStart","loading","renderUnassignedJob","overdue","statusBadge","Car","Package","JobDrawer","isOpen","onClose","onStatusUpdate","activeTab","setActiveTab","useState","notes","setNotes","quickActions","Play","XCircle","RotateCcw","tabs","User","MessageSquare","Camera","renderDetailsTab","Copy","Fragment","Building2","MapPin","renderCustomerTab","Phone","renderTimelineTab","renderPhotosTab","X","action","tab","RoundUpModal","type","onTypeChange","selectedJobs","setSelectedJobs","groupByVendor","jobList","acc","vendorName","groupJobsByDay","today","todayJobs","jobDate","groupJobsByWeek","weekDays","result","day","dayJobs","dayOfWeek","dayIndex","groupJobsByMonth","weeks","weekKey","groupedJobs","useMemo","handleJobAction","handleSelectJob","newSelected","handleExport","format","renderJobRow","renderJobGroup","groupName","groupData","vendorJobs","Download","FileText","CalendarFlowManagementCenter","setLoading","originalJobs","setOriginalJobs","originalUnassignedJobs","setOriginalUnassignedJobs","filteredJobs","setFilteredJobs","filteredUnassignedJobs","setFilteredUnassignedJobs","vendors","setVendors","selectedJob","setSelectedJob","showDrawer","setShowDrawer","showRoundUp","setShowRoundUp","roundUpType","setRoundUpType","viewMode","setViewMode","vendorLanesEnabled","setVendorLanesEnabled","currentDate","setCurrentDate","setFilters","draggedJob","setDraggedJob","dropZoneActive","setDropZoneActive","useEffect","loadCalendarData","loadVendors","applyFilters","getViewStartDate","getViewEndDate","jobsData","assignedJobs","unassigned","filteredAssigned","applyFiltersToJobList","filteredUnassigned","query","statusMapping","vendorsData","handleJobClick","handleJobStatusUpdate","newStatus","handleDragStart","handleDragEnd","handleDrop","timeSlot","renderMonthView","monthStart","monthEnd","currentWeekStart","week","weekIndex","renderEventChip","isOnSite","chipColor","statusColor","renderWeekView","timeSlots","_","i","hour","dayDate","renderVendorLanes","vendor","capacity","AppLayout","Eye","newDate","ChevronLeft","ChevronRight","Search","prev","j"],"mappings":"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"}